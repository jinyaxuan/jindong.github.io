{"meta":{"title":"单身程序员的小窝","subtitle":null,"description":null,"author":"Jindong","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"PredictYourCuisine","slug":"PredictYourCuisine","date":"2019-02-15T13:06:53.000Z","updated":"2019-02-15T13:21:24.819Z","comments":false,"path":"2019/02/15/PredictYourCuisine/","link":"","permalink":"http://yoursite.com/2019/02/15/PredictYourCuisine/","excerpt":"","text":"机器学习工程师纳米学位（试学班）项目 0: 预测你的下一道世界料理欢迎来到机器学习的预测烹饪菜系项目！在此文件中，有些示例代码已经提供给你，但你还需要实现更多的功能来让项目成功运行。除非有明确要求，你无须修改任何已给出的代码。以编程练习开始的标题表示接下来的内容中有需要你必须实现的功能。每一部分都会有详细的指导，需要实现的部分也会在注释中以TODO标出。请仔细阅读所有的提示！ 实验任务：给定佐料名称，预测菜品所属的菜系。 实验步骤：菜品数据载入；佐料名称预处理，并预览数据集结构；载入逻辑回归模型，并训练；结果测试并提交，查看实验分数。 提示：Code 和 Markdown 区域可通过 Shift + Enter 快捷键运行。此外，Markdown可以通过双击进入编辑模式。 第一步. 下载并导入数据在这个项目中，你将利用Yummly所提供的数据集来训练和测试一个模型，并对模型的性能和预测能力进行测试。通过该数据训练后的好的模型可以被用来对菜系进行预测。 此项目的数据集来自Kaggle What’s Cooking 竞赛。共 39774/9944 个训练和测试数据点，涵盖了中国菜、越南菜、法国菜等的信息。数据集包含以下特征： ‘id’：24717, 数据编号 ‘cuisine’：”indian”, 菜系 ‘ingredients’：[“tumeric”, “vegetable stock”, …] 此菜所包含的佐料 首先你需要前往此 菜系数据集 下载(选择 Download All )。如果不能正常下载，请参考教室中的下载教程。然后运行下面区域的代码以载入数据集，以及一些此项目所需的 Python 库。如果成功返回数据集的大小，表示数据集已载入成功。 1.1 配置环境首先按照本目录中README.md文件中的第一部分内容，配置实验开发环境和所需库函数。 1.2 加载数据其次，在下载完实验数据集后，我们将其解压至当前目录中(即：MLND-cn-trial\\目录下面)， 然后依次输入以下代码，加载本次实验的训练集和测试集。 12345678910111213141516171819202122## 请不要修改下方代码# 导入依赖库import jsonimport codecsimport pandas as pdimport numpy as npimport matplotlib.pyplot as plt%matplotlib inline# 加载数据集train_filename='all/train.json'train_content = pd.read_json(codecs.open(train_filename, mode='r', encoding='utf-8'))test_filename = 'all/test.json'test_content = pd.read_json(codecs.open(test_filename, mode='r', encoding='utf-8')) # 打印加载的数据集数量print(\"菜名数据集一共包含 &#123;&#125; 训练数据 和 &#123;&#125; 测试样例。\\n\".format(len(train_content), len(test_content)))if len(train_content)==39774 and len(test_content)==9944: print(\"数据成功载入！\")else: print(\"数据载入有问题，请检查文件路径！\") 菜名数据集一共包含 39774 训练数据 和 9944 测试样例。 数据成功载入！ 1.3 数据预览为了查看我们的数据集的分布和菜品总共的种类，我们打印出部分数据样例。 12## 请不要修改下方代码pd.set_option('display.max_colwidth',120) 编程练习你需要通过head()函数来预览训练集train_content数据。（输出前5条） 12### TODO：打印train_content中前5个数据样例以预览数据train_content['cuisine'] 0 greek 1 southern_us 2 filipino 3 indian 4 indian 5 jamaican 6 spanish 7 italian 8 mexican 9 italian 10 italian 11 chinese 12 italian 13 mexican 14 italian 15 indian 16 british 17 italian 18 thai 19 vietnamese 20 thai 21 mexican 22 southern_us 23 chinese 24 italian 25 chinese 26 cajun_creole 27 italian 28 chinese 29 mexican ... 39744 greek 39745 spanish 39746 indian 39747 moroccan 39748 italian 39749 mexican 39750 mexican 39751 moroccan 39752 southern_us 39753 italian 39754 vietnamese 39755 indian 39756 mexican 39757 greek 39758 greek 39759 korean 39760 southern_us 39761 chinese 39762 indian 39763 italian 39764 mexican 39765 indian 39766 irish 39767 italian 39768 mexican 39769 irish 39770 italian 39771 irish 39772 chinese 39773 mexican Name: cuisine, Length: 39774, dtype: object 1234## 请不要修改下方代码## 查看总共菜品分类categories=np.unique(train_content['cuisine'])print(\"一共包含 &#123;&#125; 种菜品，分别是:\\n&#123;&#125;\".format(len(categories),categories)) 一共包含 20 种菜品，分别是: [&apos;brazilian&apos; &apos;british&apos; &apos;cajun_creole&apos; &apos;chinese&apos; &apos;filipino&apos; &apos;french&apos; &apos;greek&apos; &apos;indian&apos; &apos;irish&apos; &apos;italian&apos; &apos;jamaican&apos; &apos;japanese&apos; &apos;korean&apos; &apos;mexican&apos; &apos;moroccan&apos; &apos;russian&apos; &apos;southern_us&apos; &apos;spanish&apos; &apos;thai&apos; &apos;vietnamese&apos;] 第二步. 分析数据在项目的第二个部分，你会对菜肴数据进行初步的观察并给出你的分析。通过对数据的探索来熟悉数据可以让你更好地理解和解释你的结果。 由于这个项目的最终目标是建立一个预测世界菜系的模型，我们需要将数据集分为特征(Features)和目标变量(Target Variables)。 特征: &#39;ingredients&#39;，给我们提供了每个菜品所包含的佐料名称。 目标变量：&#39;cuisine&#39;，是我们希望预测的菜系分类。 他们分别被存在 train_ingredients 和 train_targets 两个变量名中。 编程练习：数据提取 将train_content中的ingredients赋值到train_integredients 将train_content中的cuisine赋值到train_targets 1234567### TODO：将特征与目标变量分别赋值train_ingredients = train_content['ingredients']train_targets = train_content['cuisine']### TODO: 打印结果，检查是否正确赋值display(train_ingredients)display(train_targets) 0 [romaine lettuce, black olives, grape tomatoes, garlic, pepper, purple onion, seasoning, garbanzo beans, feta cheese... 1 [plain flour, ground pepper, salt, tomatoes, ground black pepper, thyme, eggs, green tomatoes, yellow corn meal, mil... 2 [eggs, pepper, salt, mayonaise, cooking oil, green chilies, grilled chicken breasts, garlic powder, yellow onion, so... 3 [water, vegetable oil, wheat, salt] 4 [black pepper, shallots, cornflour, cayenne pepper, onions, garlic paste, milk, butter, salt, lemon juice, water, ch... 5 [plain flour, sugar, butter, eggs, fresh ginger root, salt, ground cinnamon, milk, vanilla extract, ground ginger, p... 6 [olive oil, salt, medium shrimp, pepper, garlic, chopped cilantro, jalapeno chilies, flat leaf parsley, skirt steak,... 7 [sugar, pistachio nuts, white almond bark, flour, vanilla extract, olive oil, almond extract, eggs, baking powder, d... 8 [olive oil, purple onion, fresh pineapple, pork, poblano peppers, corn tortillas, cheddar cheese, ground black peppe... 9 [chopped tomatoes, fresh basil, garlic, extra-virgin olive oil, kosher salt, flat leaf parsley] 10 [pimentos, sweet pepper, dried oregano, olive oil, garlic, sharp cheddar cheese, pepper, swiss cheese, provolone che... 11 [low sodium soy sauce, fresh ginger, dry mustard, green beans, white pepper, sesame oil, scallions, canola oil, suga... 12 [Italian parsley leaves, walnuts, hot red pepper flakes, extra-virgin olive oil, fresh lemon juice, trout fillet, ga... 13 [ground cinnamon, fresh cilantro, chili powder, ground coriander, kosher salt, ground black pepper, garlic, plum tom... 14 [fresh parmesan cheese, butter, all-purpose flour, fat free less sodium chicken broth, chopped fresh chives, gruyere... 15 [tumeric, vegetable stock, tomatoes, garam masala, naan, red lentils, red chili peppers, onions, spinach, sweet pota... 16 [greek yogurt, lemon curd, confectioners sugar, raspberries] 17 [italian seasoning, broiler-fryer chicken, mayonaise, zesty italian dressing] 18 [sugar, hot chili, asian fish sauce, lime juice] 19 [soy sauce, vegetable oil, red bell pepper, chicken broth, yellow squash, garlic chili sauce, sliced green onions, b... 20 [pork loin, roasted peanuts, chopped cilantro fresh, hoisin sauce, creamy peanut butter, chopped fresh mint, thai ba... 21 [roma tomatoes, kosher salt, purple onion, jalapeno chilies, lime, chopped cilantro] 22 [low-fat mayonnaise, pepper, salt, baking potatoes, eggs, spicy brown mustard] 23 [sesame seeds, red pepper, yellow peppers, water, extra firm tofu, broccoli, soy sauce, orange bell pepper, arrowroo... 24 [marinara sauce, flat leaf parsley, olive oil, linguine, capers, crushed red pepper flakes, olives, lemon zest, garlic] 25 [sugar, lo mein noodles, salt, chicken broth, light soy sauce, flank steak, beansprouts, dried black mushrooms, pepp... 26 [herbs, lemon juice, fresh tomatoes, paprika, mango, stock, chile pepper, onions, red chili peppers, oil] 27 [ground black pepper, butter, sliced mushrooms, sherry, salt, grated parmesan cheese, heavy cream, spaghetti, chicke... 28 [green bell pepper, egg roll wrappers, sweet and sour sauce, corn starch, molasses, vegetable oil, oil, soy sauce, s... 29 [flour tortillas, cheese, breakfast sausages, large eggs] ... 39744 [extra-virgin olive oil, oregano, potatoes, garlic cloves, pepper, salt, yellow mustard, fresh lemon juice] 39745 [quinoa, extra-virgin olive oil, fresh thyme leaves, scallion greens] 39746 [clove, bay leaves, ginger, chopped cilantro, ground turmeric, white onion, cinnamon, cardamom pods, serrano chile, ... 39747 [water, sugar, grated lemon zest, butter, pitted date, blanched almonds] 39748 [sea salt, pizza doughs, all-purpose flour, cornmeal, extra-virgin olive oil, shredded mozzarella cheese, kosher sal... 39749 [kosher salt, minced onion, tortilla chips, sugar, tomato juice, cilantro leaves, avocado, lime juice, roma tomatoes... 39750 [ground black pepper, chicken breasts, salsa, cheddar cheese, pepper jack, heavy cream, red enchilada sauce, unsalte... 39751 [olive oil, cayenne pepper, chopped cilantro fresh, boneless chicken skinless thigh, fine sea salt, low salt chicken... 39752 [self rising flour, milk, white sugar, butter, peaches in light syrup] 39753 [rosemary sprigs, lemon zest, garlic cloves, ground black pepper, vegetable broth, fresh basil leaves, minced garlic... 39754 [jasmine rice, bay leaves, sticky rice, rotisserie chicken, chopped cilantro, large eggs, vegetable oil, yellow onio... 39755 [mint leaves, cilantro leaves, ghee, tomatoes, cinnamon, oil, basmati rice, garlic paste, salt, coconut milk, clove,... 39756 [vegetable oil, cinnamon sticks, water, all-purpose flour, piloncillo, salt, orange zest, baking powder, hot water] 39757 [red bell pepper, garlic cloves, extra-virgin olive oil, feta cheese crumbles] 39758 [milk, salt, ground cayenne pepper, ground lamb, ground cinnamon, ground black pepper, pomegranate, chopped fresh mi... 39759 [red chili peppers, sea salt, onions, water, chilli bean sauce, caster sugar, garlic, white vinegar, chili oil, cucu... 39760 [butter, large eggs, cornmeal, baking powder, boiling water, milk, salt] 39761 [honey, chicken breast halves, cilantro leaves, carrots, soy sauce, Sriracha, wonton wrappers, freshly ground pepper... 39762 [curry powder, salt, chicken, water, vegetable oil, basmati rice, eggs, finely chopped onion, lemon juice, pepper, m... 39763 [fettuccine pasta, low-fat cream cheese, garlic, nonfat evaporated milk, grated parmesan cheese, corn starch, nonfat... 39764 [chili powder, worcestershire sauce, celery, red kidney beans, lean ground beef, stewed tomatoes, dried parsley, pep... 39765 [coconut, unsweetened coconut milk, mint leaves, plain yogurt] 39766 [rutabaga, ham, thick-cut bacon, potatoes, fresh parsley, salt, onions, pepper, carrots, pork sausages] 39767 [low-fat sour cream, grated parmesan cheese, salt, dried oregano, low-fat cottage cheese, butter, onions, olive oil,... 39768 [shredded cheddar cheese, crushed cheese crackers, cheddar cheese soup, cream of chicken soup, hot sauce, diced gree... 39769 [light brown sugar, granulated sugar, butter, warm water, large eggs, all-purpose flour, whole wheat flour, cooking ... 39770 [KRAFT Zesty Italian Dressing, purple onion, broccoli florets, rotini, pitted black olives, Kraft Grated Parmesan Ch... 39771 [eggs, citrus fruit, raisins, sourdough starter, flour, hot tea, sugar, ground nutmeg, salt, ground cinnamon, milk, ... 39772 [boneless chicken skinless thigh, minced garlic, steamed white rice, baking powder, corn starch, dark soy sauce, kos... 39773 [green chile, jalapeno chilies, onions, ground black pepper, salt, chopped cilantro fresh, green bell pepper, garlic... Name: ingredients, Length: 39774, dtype: object 0 greek 1 southern_us 2 filipino 3 indian 4 indian 5 jamaican 6 spanish 7 italian 8 mexican 9 italian 10 italian 11 chinese 12 italian 13 mexican 14 italian 15 indian 16 british 17 italian 18 thai 19 vietnamese 20 thai 21 mexican 22 southern_us 23 chinese 24 italian 25 chinese 26 cajun_creole 27 italian 28 chinese 29 mexican ... 39744 greek 39745 spanish 39746 indian 39747 moroccan 39748 italian 39749 mexican 39750 mexican 39751 moroccan 39752 southern_us 39753 italian 39754 vietnamese 39755 indian 39756 mexican 39757 greek 39758 greek 39759 korean 39760 southern_us 39761 chinese 39762 indian 39763 italian 39764 mexican 39765 indian 39766 irish 39767 italian 39768 mexican 39769 irish 39770 italian 39771 irish 39772 chinese 39773 mexican Name: cuisine, Length: 39774, dtype: object 编程练习：基础统计运算你的第一个编程练习是计算有关菜系佐料的统计数据。我们已为你导入了 numpy，你需要使用这个库来执行必要的计算。这些统计数据对于分析模型的预测结果非常重要的。 在下面的代码中，你要做的是： 使用最频繁的佐料前10分别有哪些？ 意大利菜中最常见的10个佐料有哪些？ 123456789## TODO: 统计佐料出现次数，并赋值到sum_ingredients字典中sum_ingredients = &#123;&#125;for i in train_content['ingredients']: for a in i: if a not in sum_ingredients: sum_ingredients[a] = 1 elif a in sum_ingredients: sum_ingredients[a] += 1sum_ingredients {&apos;sugar&apos;: 760, &apos;pistachio nuts&apos;: 7, &apos;white almond bark&apos;: 1, &apos;flour&apos;: 142, &apos;vanilla extract&apos;: 219, &apos;olive oil&apos;: 3111, &apos;almond extract&apos;: 56, &apos;eggs&apos;: 627, &apos;baking powder&apos;: 186, &apos;dried cranberries&apos;: 8, &apos;chopped tomatoes&apos;: 37, &apos;fresh basil&apos;: 787, &apos;garlic&apos;: 1471, &apos;extra-virgin olive oil&apos;: 1362, &apos;kosher salt&apos;: 656, &apos;flat leaf parsley&apos;: 588, &apos;pimentos&apos;: 16, &apos;sweet pepper&apos;: 7, &apos;dried oregano&apos;: 626, &apos;sharp cheddar cheese&apos;: 9, &apos;pepper&apos;: 965, &apos;swiss cheese&apos;: 7, &apos;provolone cheese&apos;: 138, &apos;canola oil&apos;: 41, &apos;mushrooms&apos;: 184, &apos;black olives&apos;: 67, &apos;sausages&apos;: 58, &apos;Italian parsley leaves&apos;: 74, &apos;walnuts&apos;: 38, &apos;hot red pepper flakes&apos;: 76, &apos;fresh lemon juice&apos;: 471, &apos;trout fillet&apos;: 3, &apos;garlic cloves&apos;: 1619, &apos;chipotle chile&apos;: 2, &apos;fine sea salt&apos;: 77, &apos;fresh parmesan cheese&apos;: 251, &apos;butter&apos;: 1030, &apos;all-purpose flour&apos;: 918, &apos;fat free less sodium chicken broth&apos;: 158, &apos;chopped fresh chives&apos;: 68, &apos;gruyere cheese&apos;: 18, &apos;ground black pepper&apos;: 1444, &apos;bacon slices&apos;: 48, &apos;gnocchi&apos;: 41, &apos;fat free milk&apos;: 42, &apos;cooking spray&apos;: 491, &apos;salt&apos;: 3454, &apos;italian seasoning&apos;: 347, &apos;broiler-fryer chicken&apos;: 1, &apos;mayonaise&apos;: 63, &apos;zesty italian dressing&apos;: 11, &apos;marinara sauce&apos;: 222, &apos;linguine&apos;: 193, &apos;capers&apos;: 306, &apos;crushed red pepper flakes&apos;: 179, &apos;olives&apos;: 29, &apos;lemon zest&apos;: 98, &apos;sliced mushrooms&apos;: 131, &apos;sherry&apos;: 13, &apos;grated parmesan cheese&apos;: 1580, &apos;heavy cream&apos;: 300, &apos;spaghetti&apos;: 296, &apos;chicken broth&apos;: 245, &apos;cooked chicken&apos;: 33, &apos;yellow corn meal&apos;: 64, &apos;boiling water&apos;: 63, &apos;sea salt&apos;: 202, &apos;onions&apos;: 1240, &apos;crushed garlic&apos;: 20, &apos;green onions&apos;: 144, &apos;white sugar&apos;: 231, &apos;dried basil&apos;: 425, &apos;diced tomatoes&apos;: 429, &apos;bread slices&apos;: 15, &apos;great northern beans&apos;: 21, &apos;shrimp&apos;: 59, &apos;sage leaves&apos;: 89, &apos;Oscar Mayer Deli Fresh Smoked Ham&apos;: 1, &apos;hoagie rolls&apos;: 8, &apos;salami&apos;: 41, &apos;giardiniera&apos;: 5, &apos;mozzarella cheese&apos;: 396, &apos;pepperoni&apos;: 48, &apos;bay leaves&apos;: 107, &apos;crushed red pepper&apos;: 418, &apos;mussels&apos;: 38, &apos;basil&apos;: 174, &apos;black pepper&apos;: 636, &apos;dry white wine&apos;: 658, &apos;tomatoes&apos;: 601, &apos;finely chopped onion&apos;: 145, &apos;lemon&apos;: 236, &apos;pesto&apos;: 113, &apos;salmon fillets&apos;: 11, &apos;white wine&apos;: 176, &apos;pizza crust&apos;: 36, &apos;plum tomatoes&apos;: 340, &apos;part-skim mozzarella cheese&apos;: 201, &apos;crushed tomatoes&apos;: 241, &apos;fresh rosemary&apos;: 292, &apos;boneless pork loin&apos;: 9, &apos;pappardelle&apos;: 11, &apos;red pepper&apos;: 49, &apos;Italian bread&apos;: 89, &apos;balsamic vinegar&apos;: 348, &apos;sausage casings&apos;: 78, &apos;honey&apos;: 126, &apos;shredded mozzarella cheese&apos;: 413, &apos;roasted red peppers&apos;: 114, &apos;penne pasta&apos;: 146, &apos;spinach&apos;: 119, &apos;asiago&apos;: 72, &apos;whole wheat pasta&apos;: 13, &apos;sweet onion&apos;: 69, &apos;grape tomatoes&apos;: 98, &apos;chestnuts&apos;: 9, &apos;granulated sugar&apos;: 82, &apos;whole milk ricotta cheese&apos;: 47, &apos;coffee ice cream&apos;: 3, &apos;large eggs&apos;: 625, &apos;mascarpone&apos;: 124, &apos;rum&apos;: 12, &apos;powdered sugar&apos;: 69, &apos;semisweet chocolate&apos;: 46, &apos;chestnut flour&apos;: 1, &apos;starchy potatoes&apos;: 2, &apos;grated nutmeg&apos;: 64, &apos;blood orange&apos;: 5, &apos;freshly ground pepper&apos;: 316, &apos;fennel bulb&apos;: 103, &apos;low salt chicken broth&apos;: 138, &apos;dijon mustard&apos;: 99, &apos;corn starch&apos;: 83, &apos;white wine vinegar&apos;: 73, &apos;tomato sauce&apos;: 357, &apos;shredded carrots&apos;: 11, &apos;english muffins, split and toasted&apos;: 2, &apos;chopped onion&apos;: 327, &apos;vegetable oil cooking spray&apos;: 73, &apos;chopped green bell pepper&apos;: 39, &apos;cheddar cheese&apos;: 18, &apos;lasagna noodles&apos;: 196, &apos;ranch dressing&apos;: 5, &apos;evaporated milk&apos;: 13, &apos;fresh parsley&apos;: 631, &apos;fresh oregano&apos;: 209, &apos;cold water&apos;: 58, &apos;chocolate morsels&apos;: 4, &apos;cream sweeten whip&apos;: 3, &apos;instant espresso granules&apos;: 4, &apos;whipping cream&apos;: 162, &apos;kahlúa&apos;: 12, &apos;chocolate covered coffee beans&apos;: 1, &apos;unflavored gelatin&apos;: 48, &apos;pound cake&apos;: 7, &apos;pinenuts&apos;: 252, &apos;zucchini&apos;: 326, &apos;baby carrots&apos;: 15, &apos;fresh basil leaves&apos;: 352, &apos;asparagus spears&apos;: 24, &apos;white onion&apos;: 48, &apos;carrots&apos;: 379, &apos;frozen peas&apos;: 67, &apos;arborio rice&apos;: 261, &apos;yellow crookneck squash&apos;: 3, &apos;fresh leav spinach&apos;: 25, &apos;cheese tortellini&apos;: 53, &apos;cherry tomatoes&apos;: 170, &apos;navy beans&apos;: 8, &apos;pecorino romano cheese&apos;: 146, &apos;fresh fava bean&apos;: 12, &apos;italian sausage&apos;: 129, &apos;large garlic cloves&apos;: 293, &apos;pasta sheets&apos;: 9, &apos;water&apos;: 1052, &apos;Turkish bay leaves&apos;: 3, &apos;dried chickpeas&apos;: 1, &apos;celery ribs&apos;: 130, &apos;semolina&apos;: 14, &apos;warm water&apos;: 182, &apos;vine ripened tomatoes&apos;: 12, &apos;bittersweet chocolate&apos;: 42, &apos;fat free yogurt&apos;: 4, &apos;skim milk&apos;: 16, &apos;angel food cake&apos;: 4, &apos;unsweetened cocoa powder&apos;: 84, &apos;instant espresso&apos;: 7, &apos;garlic salt&apos;: 61, &apos;tomato paste&apos;: 376, &apos;veal cutlets&apos;: 18, &apos;broccoli rabe&apos;: 47, &apos;whole milk&apos;: 157, &apos;parmigiano reggiano cheese&apos;: 306, &apos;dry bread crumbs&apos;: 115, &apos;fontina&apos;: 27, &apos;unsalted butter&apos;: 564, &apos;pasta sauce&apos;: 246, &apos;olive oil flavored cooking spray&apos;: 29, &apos;frozen chopped spinach&apos;: 131, &apos;large egg whites&apos;: 138, &apos;part-skim ricotta cheese&apos;: 111, &apos;manicotti shells&apos;: 18, &apos;fettucine&apos;: 136, &apos;parmesan cheese&apos;: 474, &apos;large shrimp&apos;: 77, &apos;chicken bouillon&apos;: 10, &apos;cream of tartar&apos;: 9, &apos;orange liqueur&apos;: 15, &apos;heavy whipping cream&apos;: 73, &apos;semi-sweet chocolate morsels&apos;: 21, &apos;cake flour&apos;: 24, &apos;confectioners sugar&apos;: 94, &apos;ground cinnamon&apos;: 85, &apos;ricotta cheese&apos;: 333, &apos;cream cheese&apos;: 105, &apos;dried porcini mushrooms&apos;: 81, &apos;chopped fresh thyme&apos;: 151, &apos;beef rib short&apos;: 5, &apos;dry red wine&apos;: 131, &apos;hot water&apos;: 85, &apos;fat free less sodium beef broth&apos;: 7, &apos;cremini mushrooms&apos;: 67, &apos;pitted kalamata olives&apos;: 94, &apos;cauliflower&apos;: 34, &apos;whole peeled tomatoes&apos;: 60, &apos;swiss chard&apos;: 63, &apos;banana squash&apos;: 1, &apos;vegetable broth&apos;: 81, &apos;bay leaf&apos;: 130, &apos;cannellini beans&apos;: 161, &apos;boneless skinless chicken breast halves&apos;: 182, &apos;light sour cream&apos;: 5, &apos;fava beans&apos;: 13, &apos;finely chopped fresh parsley&apos;: 33, &apos;fresh tarragon&apos;: 33, &apos;grated lemon zest&apos;: 142, &apos;chopped almonds&apos;: 12, &apos;broccoli&apos;: 64, &apos;potatoes&apos;: 59, &apos;self rising flour&apos;: 1, &apos;eggplant&apos;: 204, &apos;chicken&apos;: 84, &apos;pitas&apos;: 5, &apos;goat cheese&apos;: 92, &apos;reduced fat milk&apos;: 29, &apos;smoked trout&apos;: 1, &apos;fresh dill&apos;: 16, &apos;asparagus&apos;: 123, &apos;oil&apos;: 92, &apos;ricotta salata&apos;: 22, &apos;pecorino cheese&apos;: 52, &apos;grana padano&apos;: 7, &apos;pasta&apos;: 255, &apos;cracked black pepper&apos;: 117, &apos;green bell pepper&apos;: 163, &apos;vidalia onion&apos;: 19, &apos;smoked gouda&apos;: 14, &apos;baby spinach leaves&apos;: 39, &apos;shredded sharp cheddar cheese&apos;: 17, &apos;small red potato&apos;: 13, &apos;Bertolli® Classico Olive Oil&apos;: 16, &apos;bacon, crisp-cooked and crumbled&apos;: 2, &apos;bertolli vineyard premium collect marinara with burgundi wine sauc&apos;: 5, &apos;bread crumb fresh&apos;: 74, &apos;( oz.) tomato sauce&apos;: 7, &apos;ground veal&apos;: 35, &apos;italian seasoning mix&apos;: 1, &apos;beef&apos;: 22, &apos;fat skimmed chicken broth&apos;: 28, &apos;solid pack pumpkin&apos;: 4, &apos;ground nutmeg&apos;: 127, &apos;white rice&apos;: 11, &apos;ground pepper&apos;: 77, &apos;fresh thyme leaves&apos;: 53, &apos;pistachios&apos;: 10, &apos;dried cherry&apos;: 6, &apos;prosciutto&apos;: 256, &apos;romano cheese&apos;: 89, &apos;parsley leaves&apos;: 23, &apos;shallots&apos;: 316, &apos;fresh raspberries&apos;: 14, &apos;dry vermouth&apos;: 18, &apos;canned low sodium chicken broth&apos;: 46, &apos;chicken livers&apos;: 14, &apos;raisins&apos;: 39, &apos;seasoned bread crumbs&apos;: 71, &apos;minced garlic&apos;: 334, &apos;half &amp; half&apos;: 89, &apos;ground beef&apos;: 237, &apos;jack cheese&apos;: 9, &apos;vegetables&apos;: 29, &apos;lemon juice&apos;: 216, &apos;ricotta&apos;: 95, &apos;yellow onion&apos;: 153, &apos;reduced sodium chicken broth&apos;: 36, &apos;chopped fresh mint&apos;: 54, &apos;purple onion&apos;: 350, &apos;low sodium chicken broth&apos;: 78, &apos;polenta&apos;: 132, &apos;bell pepper&apos;: 38, &apos;olive oil cooking spray&apos;: 13, &apos;bacon&apos;: 124, &apos;egg yolks&apos;: 82, &apos;duck breast halves&apos;: 1, &apos;fennel seeds&apos;: 114, &apos;roma tomatoes&apos;: 44, &apos;pesto sauce&apos;: 26, &apos;arugula&apos;: 125, &apos;summer squash&apos;: 9, &apos;red wine vinegar&apos;: 227, &apos;ciabatta&apos;: 21, &apos;juice&apos;: 72, &apos;fresh herbs&apos;: 14, &apos;grated lemon peel&apos;: 89, &apos;dough&apos;: 46, &apos;coarse sea salt&apos;: 17, &apos;rosemary leaves&apos;: 10, &apos;red pepper flakes&apos;: 206, &apos;brie cheese&apos;: 14, &apos;cheese ravioli&apos;: 18, &apos;Italian seasoned breadcrumbs&apos;: 23, &apos;cheese&apos;: 127, &apos;parsley&apos;: 95, &apos;fat-free cottage cheese&apos;: 11, &apos;oven-ready lasagna noodles&apos;: 43, &apos;margarine&apos;: 38, &apos;radicchio&apos;: 40, &apos;garbanzo beans&apos;: 18, &apos;orzo pasta&apos;: 16, &apos;rubbed sage&apos;: 17, &apos;dried rosemary&apos;: 96, &apos;canned beef broth&apos;: 4, &apos;kale leaves&apos;: 7, &apos;chicken noodle soup&apos;: 1, &apos;italian style rolls&apos;: 1, &apos;genoa salami&apos;: 22, &apos;oregano&apos;: 114, &apos;boiled ham&apos;: 1, &apos;capicola&apos;: 4, &apos;iceberg lettuce&apos;: 6, &apos;jalapeno chilies&apos;: 20, &apos;diced celery&apos;: 15, &apos;italian salad dressing mix&apos;: 7, &apos;chopped cilantro fresh&apos;: 25, &apos;cider vinegar&apos;: 14, &apos;red bell pepper&apos;: 354, &apos;sliced green onions&apos;: 40, &apos;barbecue sauce&apos;: 9, &apos;prepared pizza crust&apos;: 2, &apos;boneless skinless chicken breasts&apos;: 132, &apos;Sargento® Traditional Cut Shredded Mozzarella Cheese&apos;: 1, &apos;vegetable oil&apos;: 253, &apos;basil pesto sauce&apos;: 33, &apos;aioli&apos;: 3, &apos;cooked shrimp&apos;: 11, &apos;mozzarella balls&apos;: 4, &apos;sun-dried tomatoes&apos;: 118, &apos;milk&apos;: 277, &apos;condensed cream of mushroom soup&apos;: 16, &apos;fettuccine pasta&apos;: 24, &apos;frozen spinach&apos;: 24, &apos;lasagne&apos;: 6, &apos;passata&apos;: 3, &apos;fat free cream cheese&apos;: 8, &apos;french bread&apos;: 54, &apos;non-fat sour cream&apos;: 14, &apos;reduced fat swiss cheese&apos;: 3, &apos;fat-free mayonnaise&apos;: 8, &apos;roasted garlic&apos;: 7, &apos;seasoning&apos;: 12, &apos;kale&apos;: 58, &apos;sundried tomato paste&apos;: 4, &apos;dried thyme&apos;: 145, &apos;porcini&apos;: 7, &apos;fresh thyme&apos;: 62, &apos;sourdough loaf&apos;: 4, &apos;crust&apos;: 3, &apos;duck fat&apos;: 1, &apos;squabs&apos;: 1, &apos;confit&apos;: 2, &apos;aged gouda&apos;: 1, &apos;soppressata&apos;: 16, &apos;artichokes&apos;: 44, &apos;anchovy fillets&apos;: 124, &apos;lemon slices&apos;: 12, &apos;chicken cutlets&apos;: 23, &apos;saffron threads&apos;: 28, &apos;orzo&apos;: 51, &apos;veal chops&apos;: 4, &apos;oil cured olives&apos;: 3, &apos;pasta rotel&apos;: 2, &apos;pasta water&apos;: 10, &apos;cooking wine&apos;: 3, &apos;crusty bread&apos;: 10, &apos;fresh tomatoes&apos;: 32, &apos;uncooked rigatoni&apos;: 6, &apos;grating cheese&apos;: 6, &apos;vegetable stock&apos;: 29, &apos;freshly grated parmesan&apos;: 87, &apos;florets&apos;: 15, &apos;sliced almonds&apos;: 37, &apos;thyme sprigs&apos;: 45, &apos;egg whites&apos;: 95, &apos;greek yogurt&apos;: 6, &apos;penne&apos;: 99, &apos;fish fillets&apos;: 10, &apos;russet potatoes&apos;: 40, &apos;crumbled gorgonzola&apos;: 29, &apos;fontina cheese&apos;: 84, &apos;spinach leaves&apos;: 25, &apos;orange&apos;: 38, &apos;lamb shanks&apos;: 11, &apos;clove&apos;: 19, &apos;rosemary sprigs&apos;: 50, &apos;italian eggplant&apos;: 7, &apos;Sicilian olives&apos;: 7, &apos;mint sprigs&apos;: 28, &apos;peasant bread&apos;: 7, &apos;garlic powder&apos;: 252, &apos;Kraft Grated Parmesan Cheese&apos;: 10, &apos;peas&apos;: 42, &apos;Oscar Mayer Bacon&apos;: 1, &apos;Philadelphia Cream Cheese&apos;: 9, &apos;garnish&apos;: 3, &apos;dried navy beans&apos;: 5, &apos;celery&apos;: 155, &apos;diced onions&apos;: 42, &apos;wheat berries&apos;: 4, &apos;parsley sprigs&apos;: 38, &apos;thyme&apos;: 51, &apos;polenta prepar&apos;: 5, &apos;chicken breast halves&apos;: 35, &apos;dry sherry&apos;: 22, &apos;cocoa powder&apos;: 9, &apos;dried parsley&apos;: 90, &apos;chopped garlic&apos;: 69, &apos;baking soda&apos;: 68, &apos;coarse salt&apos;: 128, &apos;rigatoni&apos;: 60, &apos;nutmeg&apos;: 40, &apos;artichoke hearts&apos;: 99, &apos;pancetta&apos;: 153, &apos;parsnips&apos;: 7, &apos;whole wheat fettuccine&apos;: 4, &apos;ground sirloin&apos;: 20, &apos;red wine&apos;: 99, &apos;fresh marjoram&apos;: 29, &apos;castellane&apos;: 2, &apos;hot Italian sausages&apos;: 39, &apos;jumbo pasta shells&apos;: 37, &apos;fresh spinach&apos;: 87, &apos;chicken breasts&apos;: 93, &apos;gluten free blend&apos;: 1, &apos;paprika&apos;: 76, &apos;salt and ground black pepper&apos;: 66, &apos;bone in skinless chicken thigh&apos;: 1, &apos;figs&apos;: 10, &apos;egg substitute&apos;: 26, &apos;hot sauce&apos;: 20, &apos;ham&apos;: 42, &apos;balsamic vinaigrette&apos;: 6, &apos;pitted olives&apos;: 15, &apos;fresh chives&apos;: 24, &apos;white mushrooms&apos;: 20, &apos;haricots verts&apos;: 4, &apos;fresh peas&apos;: 16, &apos;bow-tie pasta&apos;: 86, &apos;asparagus tips&apos;: 3, &apos;green beans&apos;: 70, &apos;low-fat cottage cheese&apos;: 14, &apos;whole wheat lasagna noodles&apos;: 8, &apos;shredded parmesan cheese&apos;: 38, &apos;apricots&apos;: 5, &apos;grappa&apos;: 9, &apos;all purpose unbleached flour&apos;: 68, &apos;dry yeast&apos;: 71, &apos;worcestershire sauce&apos;: 54, &apos;amaretti&apos;: 6, &apos;frozen strawberries&apos;: 1, &apos;strawberries&apos;: 48, &apos;cooked ham&apos;: 9, &apos;Alfredo sauce&apos;: 43, &apos;chopped fresh sage&apos;: 91, &apos;cheese slices&apos;: 11, &apos;bread&apos;: 51, &apos;morel&apos;: 2, &apos;leeks&apos;: 106, &apos;1% low-fat cottage cheese&apos;: 10, &apos;feta cheese crumbles&apos;: 68, &apos;pork belly&apos;: 2, &apos;fresh sage&apos;: 29, &apos;pork loin&apos;: 3, &apos;sliced black olives&apos;: 49, &apos;medium shrimp&apos;: 70, &apos;red chili peppers&apos;: 22, &apos;parmigiano-reggiano cheese&apos;: 53, &apos;fresh mint&apos;: 53, &apos;baguette&apos;: 119, &apos;chicken legs&apos;: 7, &apos;baby spinach&apos;: 117, &apos;white beans&apos;: 38, &apos;ground pork&apos;: 72, &apos;romana&apos;: 1, &apos;fresh mushrooms&apos;: 117, &apos;crimini mushrooms&apos;: 26, &apos;navel oranges&apos;: 10, &apos;kalamata&apos;: 62, &apos;sea scallops&apos;: 31, &apos;ladyfingers&apos;: 40, &apos;reduced fat cream cheese&apos;: 3, &apos;whipped topping&apos;: 12, &apos;wine&apos;: 15, &apos;frozen broccoli&apos;: 5, &apos;nonfat ricotta cheese&apos;: 32, &apos;shells&apos;: 8, &apos;reduced-fat cheese&apos;: 1, &apos;cornflake cereal&apos;: 2, &apos;beef brisket&apos;: 2, &apos;dry pasta&apos;: 8, &apos;white bread&apos;: 35, &apos;pork&apos;: 10, &apos;sweet italian sausage&apos;: 72, &apos;prosecco&apos;: 10, &apos;bread dough&apos;: 16, &apos;baby lima beans&apos;: 3, &apos;whipped cream&apos;: 15, &apos;hot cocoa mix&apos;: 2, &apos;brewed coffee&apos;: 18, &apos;abbamele&apos;: 1, &apos;wild mushrooms&apos;: 30, &apos;chopped walnuts&apos;: 46, &apos;fregola&apos;: 4, &apos;savoy cabbage&apos;: 10, &apos;mushroom caps&apos;: 17, &apos;pinot grigio&apos;: 3, &apos;liquid egg substitute&apos;: 1, &apos;chocolate candy bars&apos;: 5, &apos;cooked rice&apos;: 5, &apos;bread crumbs&apos;: 103, &apos;banana peppers&apos;: 5, &apos;toasted walnuts&apos;: 7, &apos;dark rum&apos;: 22, &apos;dried fig&apos;: 11, &apos;chopped parsley&apos;: 99, &apos;ground white pepper&apos;: 33, &quot;soft goat&apos;s cheese&quot;: 10, &apos;truffle oil&apos;: 17, &apos;hazelnuts&apos;: 53, &apos;veal scallopini&apos;: 2, &apos;elbow macaroni&apos;: 19, &apos;bread flour&apos;: 77, &apos;bread yeast&apos;: 1, &apos;red potato&apos;: 26, &apos;vegan parmesan cheese&apos;: 4, &apos;ahi&apos;: 1, &apos;golden brown sugar&apos;: 14, &apos;anjou pears&apos;: 3, &apos;granny smith apples&apos;: 6, &apos;crystallized ginger&apos;: 10, &apos;ice water&apos;: 7, &apos;vegetable shortening&apos;: 5, &apos;chinese five-spice powder&apos;: 1, &apos;whole wheat flour&apos;: 21, &apos;large egg yolks&apos;: 142, &apos;lean ground beef&apos;: 135, &apos;sausage links&apos;: 32, &apos;pork chops&apos;: 8, &apos;rosemary&apos;: 57, &apos;nectarines&apos;: 5, &apos;sweet cherries&apos;: 12, &apos;orange zest&apos;: 28, &apos;lavender buds&apos;: 1, &apos;apricot halves&apos;: 4, &apos;diced tomatoes in juice&apos;: 7, &apos;scallions&apos;: 61, &apos;italian salad dressing&apos;: 41, &apos;short pasta&apos;: 7, &apos;lemon wedge&apos;: 58, &apos;porterhouse steaks&apos;: 4, &apos;1% low-fat milk&apos;: 68, &apos;golden raisins&apos;: 46, &apos;cinnamon sticks&apos;: 18, &apos;broccolini&apos;: 3, &apos;salted butter&apos;: 11, &apos;chicken stock&apos;: 142, &apos;coffee granules&apos;: 12, &apos;lemon rind&apos;: 34, &apos;baby portobello mushrooms&apos;: 10, &apos;broccoli florets&apos;: 64, &apos;orecchiette&apos;: 41, &apos;melted butter&apos;: 24, &apos;pizza shells&apos;: 3, &apos;frozen mixed thawed vegetables,&apos;: 2, &apos;ragu old world style pasta sauc&apos;: 11, &apos;loosely packed fresh basil leaves&apos;: 21, &apos;whole wheat spaghetti&apos;: 22, &apos;butternut squash&apos;: 62, &apos;wonton wrappers&apos;: 17, &apos;meat&apos;: 15, &apos;pear tomatoes&apos;: 6, &apos;gaeta olives&apos;: 5, &apos;yukon gold potatoes&apos;: 39, &apos;turbot&apos;: 2, &apos;ground lamb&apos;: 6, &apos;refrigerated pizza dough&apos;: 31, &apos;potato gnocchi&apos;: 20, &apos;cream&apos;: 27, &apos;angel hair&apos;: 60, &apos;lime juice&apos;: 6, &apos;gelato&apos;: 4, &apos;cherry preserves&apos;: 2, &apos;amaretto liqueur&apos;: 4, &apos;cherries&apos;: 14, &apos;instant espresso powder&apos;: 22, &apos;nuts&apos;: 3, &apos;brown sugar&apos;: 67, &apos;pie shell&apos;: 2, &apos;marsala wine&apos;: 105, &apos;basil leaves&apos;: 153, &apos;cake&apos;: 7, &apos;crabmeat&apos;: 11, &apos;chopped fresh herbs&apos;: 8, &apos;button mushrooms&apos;: 35, &apos;escarole&apos;: 47, &apos;chopped pecans&apos;: 28, &apos;chocolate bars&apos;: 2, &apos;coffee liqueur&apos;: 11, &apos;flat anchovy&apos;: 5, &apos;italian loaf&apos;: 4, &apos;salad dressing&apos;: 23, &apos;pitted black olives&apos;: 24, &apos;rotini&apos;: 46, &apos;frozen mixed vegetables&apos;: 4, &apos;canned tomatoes&apos;: 26, &apos;feta cheese&apos;: 36, &apos;anise seed&apos;: 13, &apos;top sirloin&apos;: 1, &apos;candy&apos;: 3, &apos;angel food cake mix&apos;: 2, &apos;buttercream frosting&apos;: 1, &apos;sour cream&apos;: 71, &apos;shredded cheddar cheese&apos;: 42, &apos;cottage cheese&apos;: 44, &apos;noodles&apos;: 38, &apos;lime&apos;: 5, &apos;watermelon&apos;: 5, &apos;risotto&apos;: 11, &apos;ice cubes&apos;: 8, &apos;peeled tomatoes&apos;: 32, &apos;cooked vermicelli&apos;: 5, &apos;buns&apos;: 1, &apos;apple cider vinegar&apos;: 7, &apos;ground red pepper&apos;: 34, &apos;yellow bell pepper&apos;: 85, &apos;active dry yeast&apos;: 128, &apos;baking potatoes&apos;: 34, &apos;grated romano cheese&apos;: 19, &apos;quinoa&apos;: 8, &apos;littleneck clams&apos;: 26, &apos;whole wheat bread&apos;: 8, &apos;cream cheese, soften&apos;: 40, &apos;salad seasoning mix&apos;: 4, &apos;cucumber&apos;: 25, &apos;pappardelle pasta&apos;: 6, &apos;fresh mozzarella&apos;: 95, &apos;tuna steaks&apos;: 16, &apos;shredded zucchini&apos;: 4, &apos;dried pasta&apos;: 13, &apos;berries&apos;: 5, &apos;clams&apos;: 50, &apos;ground round&apos;: 25, &apos;fettuccine, cook and drain&apos;: 4, &apos;tomato purée&apos;: 47, &apos;chopped celery&apos;: 103, &apos;ditalini pasta&apos;: 15, &apos;lobster&apos;: 11, &apos;almonds&apos;: 35, &apos;anise&apos;: 13, &apos;anise extract&apos;: 12, &apos;brandy&apos;: 25, &apos;boneless chicken breast&apos;: 19, &apos;buffalo sauce&apos;: 2, &apos;blue cheese dressing&apos;: 3, &apos;cannelloni shells&apos;: 2, &apos;butter cooking spray&apos;: 3, &apos;light alfredo sauce&apos;: 7, &apos;rice&apos;: 12, &apos;cream of chicken soup&apos;: 9, &apos;chees fresh mozzarella&apos;: 72, &apos;shrimp tails&apos;: 2, &apos;bay scallops&apos;: 12, &apos;lump crab meat&apos;: 17, &apos;fish stock&apos;: 11, &apos;capellini&apos;: 8, &apos;veal&apos;: 17, &apos;beef stock&apos;: 24, &apos;chard&apos;: 3, &apos;grated Gruyère cheese&apos;: 5, &apos;panko&apos;: 25, &apos;chickpeas&apos;: 37, &apos;white cornmeal&apos;: 4, &apos;red bell pepper, sliced&apos;: 2, &apos;herbs&apos;: 20, &apos;chicken thighs&apos;: 32, &apos;green bell pepper, slice&apos;: 13, &apos;vanilla&apos;: 28, &apos;liqueur&apos;: 10, &apos;aged balsamic vinegar&apos;: 8, &apos;limoncello&apos;: 6, &apos;golden beets&apos;: 4, &apos;pizza doughs&apos;: 103, &apos;black cod&apos;: 2, &apos;green cabbage&apos;: 12, &apos;cavolo nero&apos;: 4, &apos;winter squash&apos;: 1, &apos;thin pizza crust&apos;: 9, &apos;toasted pine nuts&apos;: 30, &apos;grated parmesan romano&apos;: 2, &apos;cumin seed&apos;: 4, &apos;cilantro leaves&apos;: 7, &apos;seasoning salt&apos;: 15, &apos;mixed greens&apos;: 16, &apos;turkey breast cutlets&apos;: 9, &apos;cod fillets&apos;: 8, &apos;barilla&apos;: 4, &apos;linguini&apos;: 9, &apos;perciatelli&apos;: 7, &apos;crumbled blue cheese&apos;: 16, &apos;black mission figs&apos;: 4, &apos;swordfish steaks&apos;: 11, &apos;anchovy paste&apos;: 47, &apos;chuck&apos;: 8, &apos;tomatoes with juice&apos;: 30, &apos;store bought low sodium chicken stock&apos;: 2, &apos;fresh lavender&apos;: 1, &apos;grated orange&apos;: 31, &apos;vanilla wafers&apos;: 3, &apos;amaretto&apos;: 19, &apos;toasted almonds&apos;: 6, &apos;light corn syrup&apos;: 8, &apos;focaccia&apos;: 10, &apos;oyster mushrooms&apos;: 6, &apos;shiitake mushroom caps&apos;: 16, &apos;onion powder&apos;: 39, &apos;sourdough&apos;: 7, &apos;orange bell pepper&apos;: 27, &apos;nonfat cottage cheese&apos;: 6, &apos;stewed tomatoes&apos;: 37, &apos;raspberries&apos;: 25, &apos;vanilla beans&apos;: 26, &apos;Frangelico&apos;: 9, &apos;vegetable oil spray&apos;: 22, &apos;table salt&apos;: 21, &apos;white peppercorns&apos;: 2, &apos;herb vinegar&apos;: 3, &apos;reduced fat sharp cheddar cheese&apos;: 8, &apos;deli ham&apos;: 4, &apos;ground turkey&apos;: 48, &apos;hot dogs&apos;: 2, &apos;italian style stewed tomatoes&apos;: 15, &apos;veal stock&apos;: 7, &apos;portabello mushroom&apos;: 41, &apos;rocket leaves&apos;: 35, &apos;country bread&apos;: 26, &apos;bottled balsamic vinaigrette&apos;: 1, &apos;scallops&apos;: 12, &apos;italian tomatoes&apos;: 16, &apos;peeled shrimp&apos;: 3, &apos;whole wheat pizza crust&apos;: 3, &apos;dried mixed herbs&apos;: 3, &apos;whole wheat pastry flour&apos;: 6, &apos;nonstick spray&apos;: 7, &apos;low-fat sour cream&apos;: 8, &apos;day old bread&apos;: 2, &apos;champagne vinegar&apos;: 9, &apos;pizza sauce&apos;: 71, &apos;red vermouth&apos;: 5, &apos;low sodium chicken stock&apos;: 6, &apos;peppercorns&apos;: 3, &apos;turkey stock&apos;: 3, &apos;cooked turkey&apos;: 6, &apos;green olives&apos;: 52, &apos;spaghettini&apos;: 23, &apos;minced onion&apos;: 41, &apos;beef broth&apos;: 62, &apos;dried mint flakes&apos;: 3, &apos;ravioli&apos;: 16, &apos;meat loaf mix&apos;: 1, &apos;rub&apos;: 2, &apos;clam juice&apos;: 26, &apos;bottled clam juice&apos;: 15, &apos;cayenne pepper&apos;: 50, &apos;pears&apos;: 19, &apos;gorgonzola&apos;: 27, &apos;duck&apos;: 2, &apos;pure vanilla extract&apos;: 22, &apos;panettone&apos;: 4, &apos;sambuca&apos;: 4, &apos;light brown sugar&apos;: 15, &apos;fat free frozen top whip&apos;: 5, &apos;frozen bread dough&apos;: 9, &apos;whole wheat breadcrumbs&apos;: 10, &apos;ground chuck&apos;: 16, &apos;bows&apos;: 3, &apos;sauce&apos;: 53, &apos;ground oregano&apos;: 4, &apos;lean ground turkey&apos;: 2, &apos;milk chocolate&apos;: 11, &apos;hazelnut butter&apos;: 4, &apos;fig jam&apos;: 2, &apos;crackers&apos;: 7, &apos;sun-dried tomatoes in oil&apos;: 28, &apos;dark chocolate&apos;: 7, &apos;vanilla ice cream&apos;: 17, &apos;chives&apos;: 31, &apos;radishes&apos;: 13, &apos;lettuce&apos;: 6, &apos;grilled chicken&apos;: 2, &apos;flatbread&apos;: 4, &apos;fresh parsley leaves&apos;: 56, &apos;lemon extract&apos;: 7, &apos;salad greens&apos;: 11, &apos;brown rice&apos;: 6, &apos;tortellini&apos;: 19, &apos;reduced fat alfredo sauce&apos;: 4, &apos;fresh asparagus&apos;: 24, &apos;round steaks&apos;: 5, &apos;chili powder&apos;: 26, &apos;ground cumin&apos;: 30, &apos;rolls&apos;: 21, &apos;prego traditional italian sauce&apos;: 4, &apos;brown hash potato&apos;: 5, &apos;nonfat milk&apos;: 7, &apos;frozen cheese ravioli&apos;: 6, &apos;mild Italian sausage&apos;: 17, &apos;sandwich rolls&apos;: 3, &apos;orange juice concentrate&apos;: 5, &apos;rotelle&apos;: 3, &apos;sweet italian sausag links, cut into&apos;: 2, &apos;idaho potatoes&apos;: 4, &apos;popcorn&apos;: 1, &apos;grated orange peel&apos;: 26, &apos;french fried onions&apos;: 1, &apos;turbinado&apos;: 7, &apos;cooked chicken breasts&apos;: 16, &apos;farro&apos;: 14, &apos;flour tortillas&apos;: 11, &apos;english cucumber&apos;: 7, &apos;minced peperoncini&apos;: 2, &apos;teleme&apos;: 2, &apos;brine cured green olives&apos;: 4, &apos;black forest ham&apos;: 1, &apos;frozen whole kernel corn&apos;: 5, &apos;sweet potatoes&apos;: 15, &apos;applewood smoked bacon&apos;: 7, &apos;panko breadcrumbs&apos;: 24, &apos;coarse kosher salt&apos;: 9, &apos;cornmeal&apos;: 72, &apos;dried sage&apos;: 28, &apos;dri leav thyme&apos;: 6, &apos;low sodium beef broth&apos;: 3, &apos;cabbage&apos;: 12, &apos;fresh shiitake mushrooms&apos;: 15, &apos;rabbit&apos;: 8, &apos;herbes de provence&apos;: 12, &apos;dressing&apos;: 7, &apos;chicken fingers&apos;: 3, &apos;reduced-fat sour cream&apos;: 13, &apos;dried fettuccine&apos;: 14, &apos;white pepper&apos;: 22, &apos;albacore tuna in water&apos;: 5, &apos;light mayonnaise&apos;: 7, &apos;turkey tenderloins&apos;: 4, &apos;almond flour&apos;: 8, &apos;raw almond&apos;: 3, &apos;fresh orange juice&apos;: 32, &apos;cranberries&apos;: 3, &apos;orange marmalade&apos;: 6, &apos;fresh lemon&apos;: 4, &apos;condensed chicken broth&apos;: 1, &apos;oil packed anchovy fillets&apos;: 3, &apos;boneless chicken skinless thigh&apos;: 20, &apos;sugar pea&apos;: 16, &apos;nonfat yogurt&apos;: 4, &apos;roast red peppers, drain&apos;: 24, &apos;french baguette&apos;: 25, &apos;ripe olives&apos;: 26, &apos;honey glazed ham&apos;: 2, &apos;chiles&apos;: 9, &apos;spring onions&apos;: 3, &apos;candied orange peel&apos;: 13, &apos;lard&apos;: 5, &apos;cinnamon&apos;: 23, &apos;semolina flour&apos;: 32, &apos;onion salt&apos;: 2, &apos;beef demi-glace&apos;: 1, &apos;veal shanks&apos;: 21, &apos;orange peel&apos;: 7, &apos;lemon peel&apos;: 11, &apos;plain yogurt&apos;: 7, &apos;Quinoa Flour&apos;: 1, &apos;spelt flour&apos;: 2, &apos;plums&apos;: 14, &apos;heirloom tomatoes&apos;: 21, &apos;fresh lime juice&apos;: 25, &apos;artichok heart marin&apos;: 33, &apos;bucatini&apos;: 16, &apos;processed cheese&apos;: 5, &apos;egg noodles, cooked and drained&apos;: 3, &apos;tapioca flour&apos;: 1, &apos;lasagna noodles, cooked and drained&apos;: 26, &apos;firm tofu&apos;: 9, &apos;sherry vinegar&apos;: 27, &apos;country style bread&apos;: 7, &apos;teardrop tomatoes&apos;: 2, &apos;ground sausage&apos;: 5, &apos;pita pockets&apos;: 1, &apos;orange juice&apos;: 19, &apos;chili pepper&apos;: 5, &apos;currant&apos;: 7, &apos;small capers, rins and drain&apos;: 2, &apos;filet&apos;: 4, &apos;lettuce leaves&apos;: 8, &apos;vodka&apos;: 27, &apos;stolichnaya&apos;: 1, &apos;romaine lettuce&apos;: 33, &apos;croutons&apos;: 18, &apos;pepperocini&apos;: 2, &apos;cherry peppers&apos;: 3, &apos;dandelion&apos;: 1, &apos;beans&apos;: 6, &apos;hot pepper sauce&apos;: 7, &apos;shredded Monterey Jack cheese&apos;: 13, &apos;cane sugar&apos;: 1, &apos;mixed nuts&apos;: 1, &apos;meatballs&apos;: 17, &apos;plain dry bread crumb&apos;: 11, &apos;spanish onion&apos;: 9, &apos;cuban peppers&apos;: 3, &apos;green tomatoes&apos;: 2, &apos;sesame seeds&apos;: 13, &apos;boneless beef chuck roast&apos;: 3, &apos;hard-boiled egg&apos;: 6, &apos;pork tenderloin&apos;: 24, &apos;bulk italian sausag&apos;: 21, &apos;beef bouillon granules&apos;: 3, &apos;prebaked pizza crusts&apos;: 13, &apos;buttermilk&apos;: 32, &apos;flaked coconut&apos;: 5, &apos;lower sodium chicken broth&apos;: 20, &apos;carnaroli rice&apos;: 13, &apos;fresh oregano leaves&apos;: 24, &apos;cavatappi&apos;: 9, &apos;cooking oil&apos;: 24, &apos;cayenne&apos;: 8, &apos;ground cloves&apos;: 30, &apos;corn syrup&apos;: 4, &apos;small pasta&apos;: 7, &apos;ground fennel&apos;: 7, &apos;low-fat buttermilk&apos;: 9, &apos;ice&apos;: 7, &apos;chicken bouillon granules&apos;: 6, &apos;poultry seasoning&apos;: 10, &apos;roast&apos;: 3, &apos;fusilli&apos;: 43, &apos;Italian herbs&apos;: 7, &apos;diced yellow onion&apos;: 1, &apos;manicotti pasta&apos;: 4, &apos;parsley flakes&apos;: 17, &apos;vinaigrette&apos;: 7, &apos;bread ciabatta&apos;: 16, &apos;kidney beans&apos;: 12, &apos;creole seasoning&apos;: 4, &apos;prepared pasta sauce&apos;: 5, &apos;small curd cottage cheese&apos;: 14, &apos;white sandwich bread&apos;: 9, &apos;mini chocolate chips&apos;: 5, &apos;lean beef&apos;: 2, &apos;breadstick&apos;: 13, &apos;pickled okra&apos;: 2, &apos;fronds&apos;: 15, &apos;thick-cut bacon&apos;: 11, &apos;boiling potatoes&apos;: 13, &apos;ditalini&apos;: 11, &apos;cranberry beans&apos;: 4, &apos;center cut bacon&apos;: 7, &apos;roasting chickens&apos;: 8, &apos;fleur de sel&apos;: 6, &apos;Margherita Pepperoni&apos;: 1, &apos;soft-shell clams&apos;: 1, &apos;liquid&apos;: 5, &apos;fresh chevre&apos;: 4, &apos;pork sausages&apos;: 14, &apos;dried minced onion&apos;: 5, &apos;msg&apos;: 2, &apos;pork stew meat&apos;: 1, &apos;beef stew meat&apos;: 3, &apos;ziti&apos;: 26, &apos;Balsamico Bianco&apos;: 2, &apos;ground mustard&apos;: 1, ...} 12345678## 请不要修改下方代码# Finally, plot the 10 most used ingredientsplt.style.use(u'ggplot')fig = pd.DataFrame(sum_ingredients, index=[0]).transpose()[0].sort_values(ascending=False, inplace=False)[:10].plot(kind='barh')fig.invert_yaxis()fig = fig.get_figure()fig.tight_layout()fig.show() /opt/anaconda3/lib/python3.6/site-packages/matplotlib/figure.py:448: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure. % get_backend()) 12345678910## TODO: 统计意大利菜系中佐料出现次数，并赋值到italian_ingredients字典中italian_ingredients = &#123;&#125;train_content_italian = train_content[train_content['cuisine'] == 'italian']for l in train_content_italian['ingredients']: for a in l: if a not in italian_ingredients: italian_ingredients[a] = 1 elif a in sum_italian: italian_ingredients[a] += 1italian_ingredients {&apos;sugar&apos;: 760, &apos;pistachio nuts&apos;: 7, &apos;white almond bark&apos;: 1, &apos;flour&apos;: 142, &apos;vanilla extract&apos;: 219, &apos;olive oil&apos;: 3111, &apos;almond extract&apos;: 56, &apos;eggs&apos;: 627, &apos;baking powder&apos;: 186, &apos;dried cranberries&apos;: 8, &apos;chopped tomatoes&apos;: 37, &apos;fresh basil&apos;: 787, &apos;garlic&apos;: 1471, &apos;extra-virgin olive oil&apos;: 1362, &apos;kosher salt&apos;: 656, &apos;flat leaf parsley&apos;: 588, &apos;pimentos&apos;: 16, &apos;sweet pepper&apos;: 7, &apos;dried oregano&apos;: 626, &apos;sharp cheddar cheese&apos;: 9, &apos;pepper&apos;: 965, &apos;swiss cheese&apos;: 7, &apos;provolone cheese&apos;: 138, &apos;canola oil&apos;: 41, &apos;mushrooms&apos;: 184, &apos;black olives&apos;: 67, &apos;sausages&apos;: 58, &apos;Italian parsley leaves&apos;: 74, &apos;walnuts&apos;: 38, &apos;hot red pepper flakes&apos;: 76, &apos;fresh lemon juice&apos;: 471, &apos;trout fillet&apos;: 3, &apos;garlic cloves&apos;: 1619, &apos;chipotle chile&apos;: 2, &apos;fine sea salt&apos;: 77, &apos;fresh parmesan cheese&apos;: 251, &apos;butter&apos;: 1030, &apos;all-purpose flour&apos;: 918, &apos;fat free less sodium chicken broth&apos;: 158, &apos;chopped fresh chives&apos;: 68, &apos;gruyere cheese&apos;: 18, &apos;ground black pepper&apos;: 1444, &apos;bacon slices&apos;: 48, &apos;gnocchi&apos;: 41, &apos;fat free milk&apos;: 42, &apos;cooking spray&apos;: 491, &apos;salt&apos;: 3454, &apos;italian seasoning&apos;: 347, &apos;broiler-fryer chicken&apos;: 1, &apos;mayonaise&apos;: 63, &apos;zesty italian dressing&apos;: 11, &apos;marinara sauce&apos;: 222, &apos;linguine&apos;: 193, &apos;capers&apos;: 306, &apos;crushed red pepper flakes&apos;: 179, &apos;olives&apos;: 29, &apos;lemon zest&apos;: 98, &apos;sliced mushrooms&apos;: 131, &apos;sherry&apos;: 13, &apos;grated parmesan cheese&apos;: 1580, &apos;heavy cream&apos;: 300, &apos;spaghetti&apos;: 296, &apos;chicken broth&apos;: 245, &apos;cooked chicken&apos;: 33, &apos;yellow corn meal&apos;: 64, &apos;boiling water&apos;: 63, &apos;sea salt&apos;: 202, &apos;onions&apos;: 1240, &apos;crushed garlic&apos;: 20, &apos;green onions&apos;: 144, &apos;white sugar&apos;: 231, &apos;dried basil&apos;: 425, &apos;diced tomatoes&apos;: 429, &apos;bread slices&apos;: 15, &apos;great northern beans&apos;: 21, &apos;shrimp&apos;: 59, &apos;sage leaves&apos;: 89, &apos;Oscar Mayer Deli Fresh Smoked Ham&apos;: 1, &apos;hoagie rolls&apos;: 8, &apos;salami&apos;: 41, &apos;giardiniera&apos;: 5, &apos;mozzarella cheese&apos;: 396, &apos;pepperoni&apos;: 48, &apos;bay leaves&apos;: 107, &apos;crushed red pepper&apos;: 418, &apos;mussels&apos;: 38, &apos;basil&apos;: 174, &apos;black pepper&apos;: 636, &apos;dry white wine&apos;: 658, &apos;tomatoes&apos;: 601, &apos;finely chopped onion&apos;: 145, &apos;lemon&apos;: 236, &apos;pesto&apos;: 113, &apos;salmon fillets&apos;: 11, &apos;white wine&apos;: 176, &apos;pizza crust&apos;: 36, &apos;plum tomatoes&apos;: 340, &apos;part-skim mozzarella cheese&apos;: 201, &apos;crushed tomatoes&apos;: 241, &apos;fresh rosemary&apos;: 292, &apos;boneless pork loin&apos;: 9, &apos;pappardelle&apos;: 11, &apos;red pepper&apos;: 49, &apos;Italian bread&apos;: 89, &apos;balsamic vinegar&apos;: 348, &apos;sausage casings&apos;: 78, &apos;honey&apos;: 126, &apos;shredded mozzarella cheese&apos;: 413, &apos;roasted red peppers&apos;: 114, &apos;penne pasta&apos;: 146, &apos;spinach&apos;: 119, &apos;asiago&apos;: 72, &apos;whole wheat pasta&apos;: 13, &apos;sweet onion&apos;: 69, &apos;grape tomatoes&apos;: 98, &apos;chestnuts&apos;: 9, &apos;granulated sugar&apos;: 82, &apos;whole milk ricotta cheese&apos;: 47, &apos;coffee ice cream&apos;: 3, &apos;large eggs&apos;: 625, &apos;mascarpone&apos;: 124, &apos;rum&apos;: 12, &apos;powdered sugar&apos;: 69, &apos;semisweet chocolate&apos;: 46, &apos;chestnut flour&apos;: 1, &apos;starchy potatoes&apos;: 2, &apos;grated nutmeg&apos;: 64, &apos;blood orange&apos;: 5, &apos;freshly ground pepper&apos;: 316, &apos;fennel bulb&apos;: 103, &apos;low salt chicken broth&apos;: 138, &apos;dijon mustard&apos;: 99, &apos;corn starch&apos;: 83, &apos;white wine vinegar&apos;: 73, &apos;tomato sauce&apos;: 357, &apos;shredded carrots&apos;: 11, &apos;english muffins, split and toasted&apos;: 2, &apos;chopped onion&apos;: 327, &apos;vegetable oil cooking spray&apos;: 73, &apos;chopped green bell pepper&apos;: 39, &apos;cheddar cheese&apos;: 18, &apos;lasagna noodles&apos;: 196, &apos;ranch dressing&apos;: 5, &apos;evaporated milk&apos;: 13, &apos;fresh parsley&apos;: 631, &apos;fresh oregano&apos;: 209, &apos;cold water&apos;: 58, &apos;chocolate morsels&apos;: 4, &apos;cream sweeten whip&apos;: 3, &apos;instant espresso granules&apos;: 4, &apos;whipping cream&apos;: 162, &apos;kahlúa&apos;: 12, &apos;chocolate covered coffee beans&apos;: 1, &apos;unflavored gelatin&apos;: 48, &apos;pound cake&apos;: 7, &apos;pinenuts&apos;: 252, &apos;zucchini&apos;: 326, &apos;baby carrots&apos;: 15, &apos;fresh basil leaves&apos;: 352, &apos;asparagus spears&apos;: 24, &apos;white onion&apos;: 48, &apos;carrots&apos;: 379, &apos;frozen peas&apos;: 67, &apos;arborio rice&apos;: 261, &apos;yellow crookneck squash&apos;: 3, &apos;fresh leav spinach&apos;: 25, &apos;cheese tortellini&apos;: 53, &apos;cherry tomatoes&apos;: 170, &apos;navy beans&apos;: 8, &apos;pecorino romano cheese&apos;: 146, &apos;fresh fava bean&apos;: 12, &apos;italian sausage&apos;: 129, &apos;large garlic cloves&apos;: 293, &apos;pasta sheets&apos;: 9, &apos;water&apos;: 1052, &apos;Turkish bay leaves&apos;: 3, &apos;dried chickpeas&apos;: 1, &apos;celery ribs&apos;: 130, &apos;semolina&apos;: 14, &apos;warm water&apos;: 182, &apos;vine ripened tomatoes&apos;: 12, &apos;bittersweet chocolate&apos;: 42, &apos;fat free yogurt&apos;: 4, &apos;skim milk&apos;: 16, &apos;angel food cake&apos;: 4, &apos;unsweetened cocoa powder&apos;: 84, &apos;instant espresso&apos;: 7, &apos;garlic salt&apos;: 61, &apos;tomato paste&apos;: 376, &apos;veal cutlets&apos;: 18, &apos;broccoli rabe&apos;: 47, &apos;whole milk&apos;: 157, &apos;parmigiano reggiano cheese&apos;: 306, &apos;dry bread crumbs&apos;: 115, &apos;fontina&apos;: 27, &apos;unsalted butter&apos;: 564, &apos;pasta sauce&apos;: 246, &apos;olive oil flavored cooking spray&apos;: 29, &apos;frozen chopped spinach&apos;: 131, &apos;large egg whites&apos;: 138, &apos;part-skim ricotta cheese&apos;: 111, &apos;manicotti shells&apos;: 18, &apos;fettucine&apos;: 136, &apos;parmesan cheese&apos;: 474, &apos;large shrimp&apos;: 77, &apos;chicken bouillon&apos;: 10, &apos;cream of tartar&apos;: 9, &apos;orange liqueur&apos;: 15, &apos;heavy whipping cream&apos;: 73, &apos;semi-sweet chocolate morsels&apos;: 21, &apos;cake flour&apos;: 24, &apos;confectioners sugar&apos;: 94, &apos;ground cinnamon&apos;: 85, &apos;ricotta cheese&apos;: 333, &apos;cream cheese&apos;: 105, &apos;dried porcini mushrooms&apos;: 81, &apos;chopped fresh thyme&apos;: 151, &apos;beef rib short&apos;: 5, &apos;dry red wine&apos;: 131, &apos;hot water&apos;: 85, &apos;fat free less sodium beef broth&apos;: 7, &apos;cremini mushrooms&apos;: 67, &apos;pitted kalamata olives&apos;: 94, &apos;cauliflower&apos;: 34, &apos;whole peeled tomatoes&apos;: 60, &apos;swiss chard&apos;: 63, &apos;banana squash&apos;: 1, &apos;vegetable broth&apos;: 81, &apos;bay leaf&apos;: 130, &apos;cannellini beans&apos;: 161, &apos;boneless skinless chicken breast halves&apos;: 182, &apos;light sour cream&apos;: 5, &apos;fava beans&apos;: 13, &apos;finely chopped fresh parsley&apos;: 33, &apos;fresh tarragon&apos;: 33, &apos;grated lemon zest&apos;: 142, &apos;chopped almonds&apos;: 12, &apos;broccoli&apos;: 64, &apos;potatoes&apos;: 59, &apos;self rising flour&apos;: 1, &apos;eggplant&apos;: 204, &apos;chicken&apos;: 84, &apos;pitas&apos;: 5, &apos;goat cheese&apos;: 92, &apos;reduced fat milk&apos;: 29, &apos;smoked trout&apos;: 1, &apos;fresh dill&apos;: 16, &apos;asparagus&apos;: 123, &apos;oil&apos;: 92, &apos;ricotta salata&apos;: 22, &apos;pecorino cheese&apos;: 52, &apos;grana padano&apos;: 7, &apos;pasta&apos;: 255, &apos;cracked black pepper&apos;: 117, &apos;green bell pepper&apos;: 163, &apos;vidalia onion&apos;: 19, &apos;smoked gouda&apos;: 14, &apos;baby spinach leaves&apos;: 39, &apos;shredded sharp cheddar cheese&apos;: 17, &apos;small red potato&apos;: 13, &apos;Bertolli® Classico Olive Oil&apos;: 16, &apos;bacon, crisp-cooked and crumbled&apos;: 2, &apos;bertolli vineyard premium collect marinara with burgundi wine sauc&apos;: 5, &apos;bread crumb fresh&apos;: 74, &apos;( oz.) tomato sauce&apos;: 7, &apos;ground veal&apos;: 35, &apos;italian seasoning mix&apos;: 1, &apos;beef&apos;: 22, &apos;fat skimmed chicken broth&apos;: 28, &apos;solid pack pumpkin&apos;: 4, &apos;ground nutmeg&apos;: 127, &apos;white rice&apos;: 11, &apos;ground pepper&apos;: 77, &apos;fresh thyme leaves&apos;: 53, &apos;pistachios&apos;: 10, &apos;dried cherry&apos;: 6, &apos;prosciutto&apos;: 256, &apos;romano cheese&apos;: 89, &apos;parsley leaves&apos;: 23, &apos;shallots&apos;: 316, &apos;fresh raspberries&apos;: 14, &apos;dry vermouth&apos;: 18, &apos;canned low sodium chicken broth&apos;: 46, &apos;chicken livers&apos;: 14, &apos;raisins&apos;: 39, &apos;seasoned bread crumbs&apos;: 71, &apos;minced garlic&apos;: 334, &apos;half &amp; half&apos;: 89, &apos;ground beef&apos;: 237, &apos;jack cheese&apos;: 9, &apos;vegetables&apos;: 29, &apos;lemon juice&apos;: 216, &apos;ricotta&apos;: 95, &apos;yellow onion&apos;: 153, &apos;reduced sodium chicken broth&apos;: 36, &apos;chopped fresh mint&apos;: 54, &apos;purple onion&apos;: 350, &apos;low sodium chicken broth&apos;: 78, &apos;polenta&apos;: 132, &apos;bell pepper&apos;: 38, &apos;olive oil cooking spray&apos;: 13, &apos;bacon&apos;: 124, &apos;egg yolks&apos;: 82, &apos;duck breast halves&apos;: 1, &apos;fennel seeds&apos;: 114, &apos;roma tomatoes&apos;: 44, &apos;pesto sauce&apos;: 26, &apos;arugula&apos;: 125, &apos;summer squash&apos;: 9, &apos;red wine vinegar&apos;: 227, &apos;ciabatta&apos;: 21, &apos;juice&apos;: 72, &apos;fresh herbs&apos;: 14, &apos;grated lemon peel&apos;: 89, &apos;dough&apos;: 46, &apos;coarse sea salt&apos;: 17, &apos;rosemary leaves&apos;: 10, &apos;red pepper flakes&apos;: 206, &apos;brie cheese&apos;: 14, &apos;cheese ravioli&apos;: 18, &apos;Italian seasoned breadcrumbs&apos;: 23, &apos;cheese&apos;: 127, &apos;parsley&apos;: 95, &apos;fat-free cottage cheese&apos;: 11, &apos;oven-ready lasagna noodles&apos;: 43, &apos;margarine&apos;: 38, &apos;radicchio&apos;: 40, &apos;garbanzo beans&apos;: 18, &apos;orzo pasta&apos;: 16, &apos;rubbed sage&apos;: 17, &apos;dried rosemary&apos;: 96, &apos;canned beef broth&apos;: 4, &apos;kale leaves&apos;: 7, &apos;chicken noodle soup&apos;: 1, &apos;italian style rolls&apos;: 1, &apos;genoa salami&apos;: 22, &apos;oregano&apos;: 114, &apos;boiled ham&apos;: 1, &apos;capicola&apos;: 4, &apos;iceberg lettuce&apos;: 6, &apos;jalapeno chilies&apos;: 20, &apos;diced celery&apos;: 15, &apos;italian salad dressing mix&apos;: 7, &apos;chopped cilantro fresh&apos;: 25, &apos;cider vinegar&apos;: 14, &apos;red bell pepper&apos;: 354, &apos;sliced green onions&apos;: 40, &apos;barbecue sauce&apos;: 9, &apos;prepared pizza crust&apos;: 2, &apos;boneless skinless chicken breasts&apos;: 132, &apos;Sargento® Traditional Cut Shredded Mozzarella Cheese&apos;: 1, &apos;vegetable oil&apos;: 253, &apos;basil pesto sauce&apos;: 33, &apos;aioli&apos;: 3, &apos;cooked shrimp&apos;: 11, &apos;mozzarella balls&apos;: 4, &apos;sun-dried tomatoes&apos;: 118, &apos;milk&apos;: 277, &apos;condensed cream of mushroom soup&apos;: 16, &apos;fettuccine pasta&apos;: 24, &apos;frozen spinach&apos;: 24, &apos;lasagne&apos;: 6, &apos;passata&apos;: 3, &apos;fat free cream cheese&apos;: 8, &apos;french bread&apos;: 54, &apos;non-fat sour cream&apos;: 14, &apos;reduced fat swiss cheese&apos;: 3, &apos;fat-free mayonnaise&apos;: 8, &apos;roasted garlic&apos;: 7, &apos;seasoning&apos;: 12, &apos;kale&apos;: 58, &apos;sundried tomato paste&apos;: 4, &apos;dried thyme&apos;: 145, &apos;porcini&apos;: 7, &apos;fresh thyme&apos;: 62, &apos;sourdough loaf&apos;: 4, &apos;crust&apos;: 3, &apos;duck fat&apos;: 1, &apos;squabs&apos;: 1, &apos;confit&apos;: 2, &apos;aged gouda&apos;: 1, &apos;soppressata&apos;: 16, &apos;artichokes&apos;: 44, &apos;anchovy fillets&apos;: 124, &apos;lemon slices&apos;: 12, &apos;chicken cutlets&apos;: 23, &apos;saffron threads&apos;: 28, &apos;orzo&apos;: 51, &apos;veal chops&apos;: 4, &apos;oil cured olives&apos;: 3, &apos;pasta rotel&apos;: 2, &apos;pasta water&apos;: 10, &apos;cooking wine&apos;: 3, &apos;crusty bread&apos;: 10, &apos;fresh tomatoes&apos;: 32, &apos;uncooked rigatoni&apos;: 6, &apos;grating cheese&apos;: 6, &apos;vegetable stock&apos;: 29, &apos;freshly grated parmesan&apos;: 87, &apos;florets&apos;: 15, &apos;sliced almonds&apos;: 37, &apos;thyme sprigs&apos;: 45, &apos;egg whites&apos;: 95, &apos;greek yogurt&apos;: 6, &apos;penne&apos;: 99, &apos;fish fillets&apos;: 10, &apos;russet potatoes&apos;: 40, &apos;crumbled gorgonzola&apos;: 29, &apos;fontina cheese&apos;: 84, &apos;spinach leaves&apos;: 25, &apos;orange&apos;: 38, &apos;lamb shanks&apos;: 11, &apos;clove&apos;: 19, &apos;rosemary sprigs&apos;: 50, &apos;italian eggplant&apos;: 7, &apos;Sicilian olives&apos;: 7, &apos;mint sprigs&apos;: 28, &apos;peasant bread&apos;: 7, &apos;garlic powder&apos;: 252, &apos;Kraft Grated Parmesan Cheese&apos;: 10, &apos;peas&apos;: 42, &apos;Oscar Mayer Bacon&apos;: 1, &apos;Philadelphia Cream Cheese&apos;: 9, &apos;garnish&apos;: 3, &apos;dried navy beans&apos;: 5, &apos;celery&apos;: 155, &apos;diced onions&apos;: 42, &apos;wheat berries&apos;: 4, &apos;parsley sprigs&apos;: 38, &apos;thyme&apos;: 51, &apos;polenta prepar&apos;: 5, &apos;chicken breast halves&apos;: 35, &apos;dry sherry&apos;: 22, &apos;cocoa powder&apos;: 9, &apos;dried parsley&apos;: 90, &apos;chopped garlic&apos;: 69, &apos;baking soda&apos;: 68, &apos;coarse salt&apos;: 128, &apos;rigatoni&apos;: 60, &apos;nutmeg&apos;: 40, &apos;artichoke hearts&apos;: 99, &apos;pancetta&apos;: 153, &apos;parsnips&apos;: 7, &apos;whole wheat fettuccine&apos;: 4, &apos;ground sirloin&apos;: 20, &apos;red wine&apos;: 99, &apos;fresh marjoram&apos;: 29, &apos;castellane&apos;: 2, &apos;hot Italian sausages&apos;: 39, &apos;jumbo pasta shells&apos;: 37, &apos;fresh spinach&apos;: 87, &apos;chicken breasts&apos;: 93, &apos;gluten free blend&apos;: 1, &apos;paprika&apos;: 76, &apos;salt and ground black pepper&apos;: 66, &apos;bone in skinless chicken thigh&apos;: 1, &apos;figs&apos;: 10, &apos;egg substitute&apos;: 26, &apos;hot sauce&apos;: 20, &apos;ham&apos;: 42, &apos;balsamic vinaigrette&apos;: 6, &apos;pitted olives&apos;: 15, &apos;fresh chives&apos;: 24, &apos;white mushrooms&apos;: 20, &apos;haricots verts&apos;: 4, &apos;fresh peas&apos;: 16, &apos;bow-tie pasta&apos;: 86, &apos;asparagus tips&apos;: 3, &apos;green beans&apos;: 70, &apos;low-fat cottage cheese&apos;: 14, &apos;whole wheat lasagna noodles&apos;: 8, &apos;shredded parmesan cheese&apos;: 38, &apos;apricots&apos;: 5, &apos;grappa&apos;: 9, &apos;all purpose unbleached flour&apos;: 68, &apos;dry yeast&apos;: 71, &apos;worcestershire sauce&apos;: 54, &apos;amaretti&apos;: 6, &apos;frozen strawberries&apos;: 1, &apos;strawberries&apos;: 48, &apos;cooked ham&apos;: 9, &apos;Alfredo sauce&apos;: 43, &apos;chopped fresh sage&apos;: 91, &apos;cheese slices&apos;: 11, &apos;bread&apos;: 51, &apos;morel&apos;: 2, &apos;leeks&apos;: 106, &apos;1% low-fat cottage cheese&apos;: 10, &apos;feta cheese crumbles&apos;: 68, &apos;pork belly&apos;: 2, &apos;fresh sage&apos;: 29, &apos;pork loin&apos;: 3, &apos;sliced black olives&apos;: 49, &apos;medium shrimp&apos;: 70, &apos;red chili peppers&apos;: 22, &apos;parmigiano-reggiano cheese&apos;: 53, &apos;fresh mint&apos;: 53, &apos;baguette&apos;: 119, &apos;chicken legs&apos;: 7, &apos;baby spinach&apos;: 117, &apos;white beans&apos;: 38, &apos;ground pork&apos;: 72, &apos;romana&apos;: 1, &apos;fresh mushrooms&apos;: 117, &apos;crimini mushrooms&apos;: 26, &apos;navel oranges&apos;: 10, &apos;kalamata&apos;: 62, &apos;sea scallops&apos;: 31, &apos;ladyfingers&apos;: 40, &apos;reduced fat cream cheese&apos;: 3, &apos;whipped topping&apos;: 12, &apos;wine&apos;: 15, &apos;frozen broccoli&apos;: 5, &apos;nonfat ricotta cheese&apos;: 32, &apos;shells&apos;: 8, &apos;reduced-fat cheese&apos;: 1, &apos;cornflake cereal&apos;: 2, &apos;beef brisket&apos;: 2, &apos;dry pasta&apos;: 8, &apos;white bread&apos;: 35, &apos;pork&apos;: 10, &apos;sweet italian sausage&apos;: 72, &apos;prosecco&apos;: 10, &apos;bread dough&apos;: 16, &apos;baby lima beans&apos;: 3, &apos;whipped cream&apos;: 15, &apos;hot cocoa mix&apos;: 2, &apos;brewed coffee&apos;: 18, &apos;abbamele&apos;: 1, &apos;wild mushrooms&apos;: 30, &apos;chopped walnuts&apos;: 46, &apos;fregola&apos;: 4, &apos;savoy cabbage&apos;: 10, &apos;mushroom caps&apos;: 17, &apos;pinot grigio&apos;: 3, &apos;liquid egg substitute&apos;: 1, &apos;chocolate candy bars&apos;: 5, &apos;cooked rice&apos;: 5, &apos;bread crumbs&apos;: 103, &apos;banana peppers&apos;: 5, &apos;toasted walnuts&apos;: 7, &apos;dark rum&apos;: 22, &apos;dried fig&apos;: 11, &apos;chopped parsley&apos;: 99, &apos;ground white pepper&apos;: 33, &quot;soft goat&apos;s cheese&quot;: 10, &apos;truffle oil&apos;: 17, &apos;hazelnuts&apos;: 53, &apos;veal scallopini&apos;: 2, &apos;elbow macaroni&apos;: 19, &apos;bread flour&apos;: 77, &apos;bread yeast&apos;: 1, &apos;red potato&apos;: 26, &apos;vegan parmesan cheese&apos;: 4, &apos;ahi&apos;: 1, &apos;golden brown sugar&apos;: 14, &apos;anjou pears&apos;: 3, &apos;granny smith apples&apos;: 6, &apos;crystallized ginger&apos;: 10, &apos;ice water&apos;: 7, &apos;vegetable shortening&apos;: 5, &apos;chinese five-spice powder&apos;: 1, &apos;whole wheat flour&apos;: 21, &apos;large egg yolks&apos;: 142, &apos;lean ground beef&apos;: 135, &apos;sausage links&apos;: 32, &apos;pork chops&apos;: 8, &apos;rosemary&apos;: 57, &apos;nectarines&apos;: 5, &apos;sweet cherries&apos;: 12, &apos;orange zest&apos;: 28, &apos;lavender buds&apos;: 1, &apos;apricot halves&apos;: 4, &apos;diced tomatoes in juice&apos;: 7, &apos;scallions&apos;: 61, &apos;italian salad dressing&apos;: 41, &apos;short pasta&apos;: 7, &apos;lemon wedge&apos;: 58, &apos;porterhouse steaks&apos;: 4, &apos;1% low-fat milk&apos;: 68, &apos;golden raisins&apos;: 46, &apos;cinnamon sticks&apos;: 18, &apos;broccolini&apos;: 3, &apos;salted butter&apos;: 11, &apos;chicken stock&apos;: 142, &apos;coffee granules&apos;: 12, &apos;lemon rind&apos;: 34, &apos;baby portobello mushrooms&apos;: 10, &apos;broccoli florets&apos;: 64, &apos;orecchiette&apos;: 41, &apos;melted butter&apos;: 24, &apos;pizza shells&apos;: 3, &apos;frozen mixed thawed vegetables,&apos;: 2, &apos;ragu old world style pasta sauc&apos;: 11, &apos;loosely packed fresh basil leaves&apos;: 21, &apos;whole wheat spaghetti&apos;: 22, &apos;butternut squash&apos;: 62, &apos;wonton wrappers&apos;: 17, &apos;meat&apos;: 15, &apos;pear tomatoes&apos;: 6, &apos;gaeta olives&apos;: 5, &apos;yukon gold potatoes&apos;: 39, &apos;turbot&apos;: 2, &apos;ground lamb&apos;: 6, &apos;refrigerated pizza dough&apos;: 31, &apos;potato gnocchi&apos;: 20, &apos;cream&apos;: 27, &apos;angel hair&apos;: 60, &apos;lime juice&apos;: 6, &apos;gelato&apos;: 4, &apos;cherry preserves&apos;: 2, &apos;amaretto liqueur&apos;: 4, &apos;cherries&apos;: 14, &apos;instant espresso powder&apos;: 22, &apos;nuts&apos;: 3, &apos;brown sugar&apos;: 67, &apos;pie shell&apos;: 2, &apos;marsala wine&apos;: 105, &apos;basil leaves&apos;: 153, &apos;cake&apos;: 7, &apos;crabmeat&apos;: 11, &apos;chopped fresh herbs&apos;: 8, &apos;button mushrooms&apos;: 35, &apos;escarole&apos;: 47, &apos;chopped pecans&apos;: 28, &apos;chocolate bars&apos;: 2, &apos;coffee liqueur&apos;: 11, &apos;flat anchovy&apos;: 5, &apos;italian loaf&apos;: 4, &apos;salad dressing&apos;: 23, &apos;pitted black olives&apos;: 24, &apos;rotini&apos;: 46, &apos;frozen mixed vegetables&apos;: 4, &apos;canned tomatoes&apos;: 26, &apos;feta cheese&apos;: 36, &apos;anise seed&apos;: 13, &apos;top sirloin&apos;: 1, &apos;candy&apos;: 3, &apos;angel food cake mix&apos;: 2, &apos;buttercream frosting&apos;: 1, &apos;sour cream&apos;: 71, &apos;shredded cheddar cheese&apos;: 42, &apos;cottage cheese&apos;: 44, &apos;noodles&apos;: 38, &apos;lime&apos;: 5, &apos;watermelon&apos;: 5, &apos;risotto&apos;: 11, &apos;ice cubes&apos;: 8, &apos;peeled tomatoes&apos;: 32, &apos;cooked vermicelli&apos;: 5, &apos;buns&apos;: 1, &apos;apple cider vinegar&apos;: 7, &apos;ground red pepper&apos;: 34, &apos;yellow bell pepper&apos;: 85, &apos;active dry yeast&apos;: 128, &apos;baking potatoes&apos;: 34, &apos;grated romano cheese&apos;: 19, &apos;quinoa&apos;: 8, &apos;littleneck clams&apos;: 26, &apos;whole wheat bread&apos;: 8, &apos;cream cheese, soften&apos;: 40, &apos;salad seasoning mix&apos;: 4, &apos;cucumber&apos;: 25, &apos;pappardelle pasta&apos;: 6, &apos;fresh mozzarella&apos;: 95, &apos;tuna steaks&apos;: 16, &apos;shredded zucchini&apos;: 4, &apos;dried pasta&apos;: 13, &apos;berries&apos;: 5, &apos;clams&apos;: 50, &apos;ground round&apos;: 25, &apos;fettuccine, cook and drain&apos;: 4, &apos;tomato purée&apos;: 47, &apos;chopped celery&apos;: 103, &apos;ditalini pasta&apos;: 15, &apos;lobster&apos;: 11, &apos;almonds&apos;: 35, &apos;anise&apos;: 13, &apos;anise extract&apos;: 12, &apos;brandy&apos;: 25, &apos;boneless chicken breast&apos;: 19, &apos;buffalo sauce&apos;: 2, &apos;blue cheese dressing&apos;: 3, &apos;cannelloni shells&apos;: 2, &apos;butter cooking spray&apos;: 3, &apos;light alfredo sauce&apos;: 7, &apos;rice&apos;: 12, &apos;cream of chicken soup&apos;: 9, &apos;chees fresh mozzarella&apos;: 72, &apos;shrimp tails&apos;: 2, &apos;bay scallops&apos;: 12, &apos;lump crab meat&apos;: 17, &apos;fish stock&apos;: 11, &apos;capellini&apos;: 8, &apos;veal&apos;: 17, &apos;beef stock&apos;: 24, &apos;chard&apos;: 3, &apos;grated Gruyère cheese&apos;: 5, &apos;panko&apos;: 25, &apos;chickpeas&apos;: 37, &apos;white cornmeal&apos;: 4, &apos;red bell pepper, sliced&apos;: 2, &apos;herbs&apos;: 20, &apos;chicken thighs&apos;: 32, &apos;green bell pepper, slice&apos;: 13, &apos;vanilla&apos;: 28, &apos;liqueur&apos;: 10, &apos;aged balsamic vinegar&apos;: 8, &apos;limoncello&apos;: 6, &apos;golden beets&apos;: 4, &apos;pizza doughs&apos;: 103, &apos;black cod&apos;: 2, &apos;green cabbage&apos;: 12, &apos;cavolo nero&apos;: 4, &apos;winter squash&apos;: 1, &apos;thin pizza crust&apos;: 9, &apos;toasted pine nuts&apos;: 30, &apos;grated parmesan romano&apos;: 2, &apos;cumin seed&apos;: 4, &apos;cilantro leaves&apos;: 7, &apos;seasoning salt&apos;: 15, &apos;mixed greens&apos;: 16, &apos;turkey breast cutlets&apos;: 9, &apos;cod fillets&apos;: 8, &apos;barilla&apos;: 4, &apos;linguini&apos;: 9, &apos;perciatelli&apos;: 7, &apos;crumbled blue cheese&apos;: 16, &apos;black mission figs&apos;: 4, &apos;swordfish steaks&apos;: 11, &apos;anchovy paste&apos;: 47, &apos;chuck&apos;: 8, &apos;tomatoes with juice&apos;: 30, &apos;store bought low sodium chicken stock&apos;: 2, &apos;fresh lavender&apos;: 1, &apos;grated orange&apos;: 31, &apos;vanilla wafers&apos;: 3, &apos;amaretto&apos;: 19, &apos;toasted almonds&apos;: 6, &apos;light corn syrup&apos;: 8, &apos;focaccia&apos;: 10, &apos;oyster mushrooms&apos;: 6, &apos;shiitake mushroom caps&apos;: 16, &apos;onion powder&apos;: 39, &apos;sourdough&apos;: 7, &apos;orange bell pepper&apos;: 27, &apos;nonfat cottage cheese&apos;: 6, &apos;stewed tomatoes&apos;: 37, &apos;raspberries&apos;: 25, &apos;vanilla beans&apos;: 26, &apos;Frangelico&apos;: 9, &apos;vegetable oil spray&apos;: 22, &apos;table salt&apos;: 21, &apos;white peppercorns&apos;: 2, &apos;herb vinegar&apos;: 3, &apos;reduced fat sharp cheddar cheese&apos;: 8, &apos;deli ham&apos;: 4, &apos;ground turkey&apos;: 48, &apos;hot dogs&apos;: 2, &apos;italian style stewed tomatoes&apos;: 15, &apos;veal stock&apos;: 7, &apos;portabello mushroom&apos;: 41, &apos;rocket leaves&apos;: 35, &apos;country bread&apos;: 26, &apos;bottled balsamic vinaigrette&apos;: 1, &apos;scallops&apos;: 12, &apos;italian tomatoes&apos;: 16, &apos;peeled shrimp&apos;: 3, &apos;whole wheat pizza crust&apos;: 3, &apos;dried mixed herbs&apos;: 3, &apos;whole wheat pastry flour&apos;: 6, &apos;nonstick spray&apos;: 7, &apos;low-fat sour cream&apos;: 8, &apos;day old bread&apos;: 2, &apos;champagne vinegar&apos;: 9, &apos;pizza sauce&apos;: 71, &apos;red vermouth&apos;: 5, &apos;low sodium chicken stock&apos;: 6, &apos;peppercorns&apos;: 3, &apos;turkey stock&apos;: 3, &apos;cooked turkey&apos;: 6, &apos;green olives&apos;: 52, &apos;spaghettini&apos;: 23, &apos;minced onion&apos;: 41, &apos;beef broth&apos;: 62, &apos;dried mint flakes&apos;: 3, &apos;ravioli&apos;: 16, &apos;meat loaf mix&apos;: 1, &apos;rub&apos;: 2, &apos;clam juice&apos;: 26, &apos;bottled clam juice&apos;: 15, &apos;cayenne pepper&apos;: 50, &apos;pears&apos;: 19, &apos;gorgonzola&apos;: 27, &apos;duck&apos;: 2, &apos;pure vanilla extract&apos;: 22, &apos;panettone&apos;: 4, &apos;sambuca&apos;: 4, &apos;light brown sugar&apos;: 15, &apos;fat free frozen top whip&apos;: 5, &apos;frozen bread dough&apos;: 9, &apos;whole wheat breadcrumbs&apos;: 10, &apos;ground chuck&apos;: 16, &apos;bows&apos;: 3, &apos;sauce&apos;: 53, &apos;ground oregano&apos;: 4, &apos;lean ground turkey&apos;: 2, &apos;milk chocolate&apos;: 11, &apos;hazelnut butter&apos;: 4, &apos;fig jam&apos;: 2, &apos;crackers&apos;: 7, &apos;sun-dried tomatoes in oil&apos;: 28, &apos;dark chocolate&apos;: 7, &apos;vanilla ice cream&apos;: 17, &apos;chives&apos;: 31, &apos;radishes&apos;: 13, &apos;lettuce&apos;: 6, &apos;grilled chicken&apos;: 2, &apos;flatbread&apos;: 4, &apos;fresh parsley leaves&apos;: 56, &apos;lemon extract&apos;: 7, &apos;salad greens&apos;: 11, &apos;brown rice&apos;: 6, &apos;tortellini&apos;: 19, &apos;reduced fat alfredo sauce&apos;: 4, &apos;fresh asparagus&apos;: 24, &apos;round steaks&apos;: 5, &apos;chili powder&apos;: 26, &apos;ground cumin&apos;: 30, &apos;rolls&apos;: 21, &apos;prego traditional italian sauce&apos;: 4, &apos;brown hash potato&apos;: 5, &apos;nonfat milk&apos;: 7, &apos;frozen cheese ravioli&apos;: 6, &apos;mild Italian sausage&apos;: 17, &apos;sandwich rolls&apos;: 3, &apos;orange juice concentrate&apos;: 5, &apos;rotelle&apos;: 3, &apos;sweet italian sausag links, cut into&apos;: 2, &apos;idaho potatoes&apos;: 4, &apos;popcorn&apos;: 1, &apos;grated orange peel&apos;: 26, &apos;french fried onions&apos;: 1, &apos;turbinado&apos;: 7, &apos;cooked chicken breasts&apos;: 16, &apos;farro&apos;: 14, &apos;flour tortillas&apos;: 11, &apos;english cucumber&apos;: 7, &apos;minced peperoncini&apos;: 2, &apos;teleme&apos;: 2, &apos;brine cured green olives&apos;: 4, &apos;black forest ham&apos;: 1, &apos;frozen whole kernel corn&apos;: 5, &apos;sweet potatoes&apos;: 15, &apos;applewood smoked bacon&apos;: 7, &apos;panko breadcrumbs&apos;: 24, &apos;coarse kosher salt&apos;: 9, &apos;cornmeal&apos;: 72, &apos;dried sage&apos;: 28, &apos;dri leav thyme&apos;: 6, &apos;low sodium beef broth&apos;: 3, &apos;cabbage&apos;: 12, &apos;fresh shiitake mushrooms&apos;: 15, &apos;rabbit&apos;: 8, &apos;herbes de provence&apos;: 12, &apos;dressing&apos;: 7, &apos;chicken fingers&apos;: 3, &apos;reduced-fat sour cream&apos;: 13, &apos;dried fettuccine&apos;: 14, &apos;white pepper&apos;: 22, &apos;albacore tuna in water&apos;: 5, &apos;light mayonnaise&apos;: 7, &apos;turkey tenderloins&apos;: 4, &apos;almond flour&apos;: 8, &apos;raw almond&apos;: 3, &apos;fresh orange juice&apos;: 32, &apos;cranberries&apos;: 3, &apos;orange marmalade&apos;: 6, &apos;fresh lemon&apos;: 4, &apos;condensed chicken broth&apos;: 1, &apos;oil packed anchovy fillets&apos;: 3, &apos;boneless chicken skinless thigh&apos;: 20, &apos;sugar pea&apos;: 16, &apos;nonfat yogurt&apos;: 4, &apos;roast red peppers, drain&apos;: 24, &apos;french baguette&apos;: 25, &apos;ripe olives&apos;: 26, &apos;honey glazed ham&apos;: 2, &apos;chiles&apos;: 9, &apos;spring onions&apos;: 3, &apos;candied orange peel&apos;: 13, &apos;lard&apos;: 5, &apos;cinnamon&apos;: 23, &apos;semolina flour&apos;: 32, &apos;onion salt&apos;: 2, &apos;beef demi-glace&apos;: 1, &apos;veal shanks&apos;: 21, &apos;orange peel&apos;: 7, &apos;lemon peel&apos;: 11, &apos;plain yogurt&apos;: 7, &apos;Quinoa Flour&apos;: 1, &apos;spelt flour&apos;: 2, &apos;plums&apos;: 14, &apos;heirloom tomatoes&apos;: 21, &apos;fresh lime juice&apos;: 25, &apos;artichok heart marin&apos;: 33, &apos;bucatini&apos;: 16, &apos;processed cheese&apos;: 5, &apos;egg noodles, cooked and drained&apos;: 3, &apos;tapioca flour&apos;: 1, &apos;lasagna noodles, cooked and drained&apos;: 26, &apos;firm tofu&apos;: 9, &apos;sherry vinegar&apos;: 27, &apos;country style bread&apos;: 7, &apos;teardrop tomatoes&apos;: 2, &apos;ground sausage&apos;: 5, &apos;pita pockets&apos;: 1, &apos;orange juice&apos;: 19, &apos;chili pepper&apos;: 5, &apos;currant&apos;: 7, &apos;small capers, rins and drain&apos;: 2, &apos;filet&apos;: 4, &apos;lettuce leaves&apos;: 8, &apos;vodka&apos;: 27, &apos;stolichnaya&apos;: 1, &apos;romaine lettuce&apos;: 33, &apos;croutons&apos;: 18, &apos;pepperocini&apos;: 2, &apos;cherry peppers&apos;: 3, &apos;dandelion&apos;: 1, &apos;beans&apos;: 6, &apos;hot pepper sauce&apos;: 7, &apos;shredded Monterey Jack cheese&apos;: 13, &apos;cane sugar&apos;: 1, &apos;mixed nuts&apos;: 1, &apos;meatballs&apos;: 17, &apos;plain dry bread crumb&apos;: 11, &apos;spanish onion&apos;: 9, &apos;cuban peppers&apos;: 3, &apos;green tomatoes&apos;: 2, &apos;sesame seeds&apos;: 13, &apos;boneless beef chuck roast&apos;: 3, &apos;hard-boiled egg&apos;: 6, &apos;pork tenderloin&apos;: 24, &apos;bulk italian sausag&apos;: 21, &apos;beef bouillon granules&apos;: 3, &apos;prebaked pizza crusts&apos;: 13, &apos;buttermilk&apos;: 32, &apos;flaked coconut&apos;: 5, &apos;lower sodium chicken broth&apos;: 20, &apos;carnaroli rice&apos;: 13, &apos;fresh oregano leaves&apos;: 24, &apos;cavatappi&apos;: 9, &apos;cooking oil&apos;: 24, &apos;cayenne&apos;: 8, &apos;ground cloves&apos;: 30, &apos;corn syrup&apos;: 4, &apos;small pasta&apos;: 7, &apos;ground fennel&apos;: 7, &apos;low-fat buttermilk&apos;: 9, &apos;ice&apos;: 7, &apos;chicken bouillon granules&apos;: 6, &apos;poultry seasoning&apos;: 10, &apos;roast&apos;: 3, &apos;fusilli&apos;: 43, &apos;Italian herbs&apos;: 7, &apos;diced yellow onion&apos;: 1, &apos;manicotti pasta&apos;: 4, &apos;parsley flakes&apos;: 17, &apos;vinaigrette&apos;: 7, &apos;bread ciabatta&apos;: 16, &apos;kidney beans&apos;: 12, &apos;creole seasoning&apos;: 4, &apos;prepared pasta sauce&apos;: 5, &apos;small curd cottage cheese&apos;: 14, &apos;white sandwich bread&apos;: 9, &apos;mini chocolate chips&apos;: 5, &apos;lean beef&apos;: 2, &apos;breadstick&apos;: 13, &apos;pickled okra&apos;: 2, &apos;fronds&apos;: 15, &apos;thick-cut bacon&apos;: 11, &apos;boiling potatoes&apos;: 13, &apos;ditalini&apos;: 11, &apos;cranberry beans&apos;: 4, &apos;center cut bacon&apos;: 7, &apos;roasting chickens&apos;: 8, &apos;fleur de sel&apos;: 6, &apos;Margherita Pepperoni&apos;: 1, &apos;soft-shell clams&apos;: 1, &apos;liquid&apos;: 5, &apos;fresh chevre&apos;: 4, &apos;pork sausages&apos;: 14, &apos;dried minced onion&apos;: 5, &apos;msg&apos;: 2, &apos;pork stew meat&apos;: 1, &apos;beef stew meat&apos;: 3, &apos;ziti&apos;: 26, &apos;Balsamico Bianco&apos;: 2, &apos;ground mustard&apos;: 1, ...} 1234567## 请不要修改下方代码# Finally, plot the 10 most used ingredientsfig = pd.DataFrame(italian_ingredients, index=[0]).transpose()[0].sort_values(ascending=False, inplace=False)[:10].plot(kind='barh')fig.invert_yaxis()fig = fig.get_figure()fig.tight_layout()fig.show() /opt/anaconda3/lib/python3.6/site-packages/matplotlib/figure.py:448: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure. % get_backend()) 若想要对数据分析做更深入的了解，可以参考数据分析师入门课程或者基于Python语言的人工智能Nano课程. 第三步. 建立模型在项目的第三步中，你需要了解必要的工具和技巧来让你的模型进行预测。用这些工具和技巧对每一个模型的表现做精确的衡量可以极大地增强你预测的信心。 3.1 单词清洗由于菜品包含的佐料众多，同一种佐料也可能有单复数、时态等变化，为了去除这类差异，我们考虑将ingredients 进行过滤 12345678910111213141516171819202122## 请不要修改下方代码import refrom nltk.stem import WordNetLemmatizerimport numpy as npdef text_clean(ingredients): #去除单词的标点符号，只保留 a..z A...Z的单词字符 ingredients= np.array(ingredients).tolist() print(\"菜品佐料：\\n&#123;&#125;\".format(ingredients[9])) ingredients=[[re.sub('[^A-Za-z]', ' ', word) for word in component]for component in ingredients] print(\"去除标点符号之后的结果：\\n&#123;&#125;\".format(ingredients[9])) # 去除单词的单复数，时态，只保留单词的词干 lemma=WordNetLemmatizer() ingredients=[\" \".join([ \" \".join([lemma.lemmatize(w) for w in words.split(\" \")]) for words in component]) for component in ingredients] print(\"去除时态和单复数之后的结果：\\n&#123;&#125;\".format(ingredients[9])) return ingredientsprint(\"\\n处理训练集...\")train_ingredients = text_clean(train_content['ingredients'])print(\"\\n处理测试集...\")test_ingredients = text_clean(test_content['ingredients']) [nltk_data] Downloading package wordnet to [nltk_data] /Users/jindongwang/nltk_data... [nltk_data] Unzipping corpora/wordnet.zip. 处理训练集... 菜品佐料： [&apos;chopped tomatoes&apos;, &apos;fresh basil&apos;, &apos;garlic&apos;, &apos;extra-virgin olive oil&apos;, &apos;kosher salt&apos;, &apos;flat leaf parsley&apos;] 去除标点符号之后的结果： [&apos;chopped tomatoes&apos;, &apos;fresh basil&apos;, &apos;garlic&apos;, &apos;extra virgin olive oil&apos;, &apos;kosher salt&apos;, &apos;flat leaf parsley&apos;] 去除时态和单复数之后的结果： chopped tomato fresh basil garlic extra virgin olive oil kosher salt flat leaf parsley 处理测试集... 菜品佐料： [&apos;eggs&apos;, &apos;cherries&apos;, &apos;dates&apos;, &apos;dark muscovado sugar&apos;, &apos;ground cinnamon&apos;, &apos;mixed spice&apos;, &apos;cake&apos;, &apos;vanilla extract&apos;, &apos;self raising flour&apos;, &apos;sultana&apos;, &apos;rum&apos;, &apos;raisins&apos;, &apos;prunes&apos;, &apos;glace cherries&apos;, &apos;butter&apos;, &apos;port&apos;] 去除标点符号之后的结果： [&apos;eggs&apos;, &apos;cherries&apos;, &apos;dates&apos;, &apos;dark muscovado sugar&apos;, &apos;ground cinnamon&apos;, &apos;mixed spice&apos;, &apos;cake&apos;, &apos;vanilla extract&apos;, &apos;self raising flour&apos;, &apos;sultana&apos;, &apos;rum&apos;, &apos;raisins&apos;, &apos;prunes&apos;, &apos;glace cherries&apos;, &apos;butter&apos;, &apos;port&apos;] 去除时态和单复数之后的结果： egg cherry date dark muscovado sugar ground cinnamon mixed spice cake vanilla extract self raising flour sultana rum raisin prune glace cherry butter port 3.2 特征提取在该步骤中，我们将菜品的佐料转换成数值特征向量。考虑到绝大多数菜中都包含salt, water, sugar, butter等，采用one-hot的方法提取的向量将不能很好的对菜系作出区分。我们将考虑按照佐料出现的次数对佐料做一定的加权，即：佐料出现次数越多，佐料的区分性就越低。我们采用的特征为TF-IDF，相关介绍内容可以参考：TF-IDF与余弦相似性的应用（一）：自动提取关键词。 123456789101112## 请不要修改下方代码from sklearn.feature_extraction.text import TfidfVectorizer# 将佐料转换成特征向量# 处理 训练集vectorizer = TfidfVectorizer(stop_words='english', ngram_range=(1, 1), analyzer='word', max_df=.57, binary=False, token_pattern=r\"\\w+\",sublinear_tf=False)train_tfidf = vectorizer.fit_transform(train_ingredients).todense()## 处理 测试集test_tfidf = vectorizer.transform(test_ingredients) 123## 请不要修改下方代码train_targets=np.array(train_content['cuisine']).tolist()train_targets[:10] [&apos;greek&apos;, &apos;southern_us&apos;, &apos;filipino&apos;, &apos;indian&apos;, &apos;indian&apos;, &apos;jamaican&apos;, &apos;spanish&apos;, &apos;italian&apos;, &apos;mexican&apos;, &apos;italian&apos;] 编程练习这里我们为了防止前面步骤中累积的错误，导致以下步骤无法正常运行。我们在此检查处理完的实验数据是否正确，请打印train_tfidf和train_targets中前五个数据。 123# 你需要预览训练集train_tfidf,train_targets中前5条数据，试试Python的切片语法display(train_tfidf[:5])display(train_targets[:5]) matrix([[0., 0., 0., ..., 0., 0., 0.], [0., 0., 0., ..., 0., 0., 0.], [0., 0., 0., ..., 0., 0., 0.], [0., 0., 0., ..., 0., 0., 0.], [0., 0., 0., ..., 0., 0., 0.]]) [&apos;greek&apos;, &apos;southern_us&apos;, &apos;filipino&apos;, &apos;indian&apos;, &apos;indian&apos;] 3.3 验证集划分为了在实验中大致估计模型的精确度我们将从原本的train_ingredients 划分出 20% 的数据用作valid_ingredients。 编程练习：数据分割与重排调用train_test_split函数将训练集划分为新的训练集和验证集，便于之后的模型精度观测。 从sklearn.model_selection中导入train_test_split 将train_tfidf和train_targets作为train_test_split的输入变量 设置test_size为0.2，划分出20%的验证集，80%的数据留作新的训练集。 设置random_state随机种子，以确保每一次运行都可以得到相同划分的结果。（随机种子固定，生成的随机序列就是确定的） 12345### TODO：划分出验证集from sklearn.model_selection import train_test_splitX_train , X_valid , y_train, y_valid = train_test_split(train_tfidf, train_targets, test_size=0.2, random_state=1) 3.2 建立模型调用 sklearn 中的逻辑回归模型（Logistic Regression）。 编程练习：训练模型 从sklearn.linear_model导入LogisticRegression 从sklearn.model_selection导入GridSearchCV, 参数自动搜索，只要把参数输进去，就能给出最优的结果和参数，这个方法适合小数据集。 定义parameters变量：为C参数创造一个字典，它的值是从1至10的数组; 定义classifier变量: 使用导入的LogisticRegression创建一个分类函数; 定义grid变量: 使用导入的GridSearchCV创建一个网格搜索对象；将变量’classifier’, ‘parameters’作为参数传至这个对象构造函数中； 12345678910111213from sklearn.linear_model import LogisticRegressionfrom sklearn.model_selection import GridSearchCV## TODO: 建立逻辑回归模型parameters = &#123;'C':[1,2,3,4,5,6,7,8,9,10]&#125;classifier = LogisticRegression()grid = GridSearchCV(classifier, parameters)## 请不要修改下方代码grid = grid.fit(X_train, y_train) 模型训练结束之后，我们计算模型在验证集X_valid上预测结果，并计算模型的预测精度（与y_valid逐个比较）。 1234567## 请不要修改下方代码from sklearn.metrics import accuracy_score ## 计算模型的准确率valid_predict = grid.predict(X_valid)valid_score=accuracy_score(y_valid,valid_predict)print(\"验证集上的得分为：&#123;&#125;\".format(valid_score)) 验证集上的得分为：0.7912005028284098 第四步. 模型预测（可选）4.1 预测测试集编程练习 将模型grid对测试集test_tfidf做预测，然后查看预测结果。 1234567### TODO：预测测试结果predictions = grid.predict(test_tfidf)## 请不要修改下方代码print(\"预测的测试集个数为：&#123;&#125;\".format(len(predictions)))test_content['cuisine']=predictionstest_content.head(10) 预测的测试集个数为：9944 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id ingredients cuisine 0 18009 [baking powder, eggs, all-purpose flour, raisins, milk, white sugar] british 1 28583 [sugar, egg yolks, corn starch, cream of tartar, bananas, vanilla wafers, milk, vanilla extract, toasted pecans, egg… southern_us 2 41580 [sausage links, fennel bulb, fronds, olive oil, cuban peppers, onions] italian 3 29752 [meat cuts, file powder, smoked sausage, okra, shrimp, andouille sausage, water, paprika, hot sauce, garlic cloves, … cajun_creole 4 35687 [ground black pepper, salt, sausage casings, leeks, parmigiano reggiano cheese, cornmeal, water, extra-virgin olive … italian 5 38527 [baking powder, all-purpose flour, peach slices, corn starch, heavy cream, lemon juice, unsalted butter, salt, white… southern_us 6 19666 [grape juice, orange, white zinfandel] french 7 41217 [ground ginger, white pepper, green onions, orange juice, sugar, Sriracha, vegetable oil, orange zest, chicken broth… chinese 8 28753 [diced onions, taco seasoning mix, all-purpose flour, chopped cilantro fresh, ground cumin, ground cinnamon, vegetab… mexican 9 22659 [eggs, cherries, dates, dark muscovado sugar, ground cinnamon, mixed spice, cake, vanilla extract, self raising flou… british 4.2 提交结果为了更好的测试模型的效果，同时比较与其他人的差距，我们将模型的测试集上的结果提交至 kaggle What’s Cooking? （需要提前注册kaggle账号）。 注意：在提交作业时，请将提交排名得分截图，附在压缩包中。 1234567## 加载结果格式submit_frame = pd.read_csv(\"sample_submission.csv\")## 保存结果result = pd.merge(submit_frame, test_content, on=\"id\", how='left')result = result.rename(index=str, columns=&#123;\"cuisine_y\": \"cuisine\"&#125;)test_result_name = \"tfidf_cuisine_test.csv\"result[['id','cuisine']].to_csv(test_result_name,index=False) 将生成的 tfidf_cuisine_test.csv 提交至 https://www.kaggle.com/c/whats-cooking/submit 然后选择 Upload Submission File, 点击 Make submission即可。稍作等待，就可以看到右上角的评分结果（得分大致为：0.78580 左右）。","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"}],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://yoursite.com/tags/Machine-Learning/"}],"keywords":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"}]},{"title":"Scorecard","slug":"Scorecard","date":"2019-02-15T10:40:26.000Z","updated":"2019-02-15T10:42:13.539Z","comments":false,"path":"2019/02/15/Scorecard/","link":"","permalink":"http://yoursite.com/2019/02/15/Scorecard/","excerpt":"","text":"信用评分卡模型是一种比较成熟的预测方法，广泛应用于信用风险评估以及金融风险控制等领域，其基本原理是：将模型变量以WOE编码方式离散化之后运用 logistic 回归模型进行二分类变量的拟合及预测。信用评分卡一般可以分为申请评分卡、行为评分卡、催收评分卡等。本文主要讲述申请评分卡模型的建模分析过程。 主要分以下几个步骤： 目标定义 数据获取 数据预处理 模型开发 模型评估 评分系统建立 1. 目标定义数据来源kaggle project: ‘give-me-some-credit-dataset’， 找出关键的特征变量，建立信用评分模型 2. 数据获取12345678910#导入必要的库包import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as snsfrom sklearn.ensemble import RandomForestRegressorimport warningswarnings.filterwarnings('ignore')%matplotlib inline 1234#读取数据data=pd.read_csv('cs-training.csv')data=data.drop(axis=1, columns=[data.columns[0]])data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } SeriousDlqin2yrs RevolvingUtilizationOfUnsecuredLines age NumberOfTime30-59DaysPastDueNotWorse DebtRatio MonthlyIncome NumberOfOpenCreditLinesAndLoans NumberOfTimes90DaysLate NumberRealEstateLoansOrLines NumberOfTime60-89DaysPastDueNotWorse NumberOfDependents 0 1 0.766127 45 2 0.802982 9120.0 13 0 6 0 2.0 1 0 0.957151 40 0 0.121876 2600.0 4 0 0 0 1.0 2 0 0.658180 38 1 0.085113 3042.0 2 1 0 0 0.0 3 0 0.233810 30 0 0.036050 3300.0 5 0 0 0 0.0 4 0 0.907239 49 1 0.024926 63588.0 7 0 1 0 0.0 1data.info() &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; RangeIndex: 150000 entries, 0 to 149999 Data columns (total 11 columns): SeriousDlqin2yrs 150000 non-null int64 RevolvingUtilizationOfUnsecuredLines 150000 non-null float64 age 150000 non-null int64 NumberOfTime30-59DaysPastDueNotWorse 150000 non-null int64 DebtRatio 150000 non-null float64 MonthlyIncome 120269 non-null float64 NumberOfOpenCreditLinesAndLoans 150000 non-null int64 NumberOfTimes90DaysLate 150000 non-null int64 NumberRealEstateLoansOrLines 150000 non-null int64 NumberOfTime60-89DaysPastDueNotWorse 150000 non-null int64 NumberOfDependents 146076 non-null float64 dtypes: float64(4), int64(7) memory usage: 12.6 MB 3. 数据预处理1234567891011121314#缺失值处理 #随机森林法填补MonthlyIncomeMI_df=data.iloc[:,0:10]MI_known=MI_df.loc[MI_df['MonthlyIncome'].notnull()]MI_unknown=MI_df.loc[MI_df['MonthlyIncome'].isnull()]X_known=MI_known.drop('MonthlyIncome',axis=1)y_known=MI_known['MonthlyIncome']X_unknown=MI_unknown.drop('MonthlyIncome',axis=1)rfr=RandomForestRegressor(random_state=0, n_estimators=100, max_depth=3, n_jobs=-1)rfr.fit(X_known, y_known)data.loc[MI_df['MonthlyIncome'].isnull(), 'MonthlyIncome']=rfr.predict(X_unknown).round(0)print('Done') Done 1234#NumberOfDependents 缺失值较少，可以直接删除data.dropna(inplace=True)#去除重复值data.drop_duplicates(inplace=True) 12#异常值处理sns.boxplot(y='age', data=data) &lt;matplotlib.axes._subplots.AxesSubplot at 0x10e034cc0&gt; 1data=data[((data['age']&gt;0) &amp; (data['age']&lt;100))] 123#逾期次数sns.boxplot(data=data[['NumberOfTime30-59DaysPastDueNotWorse','NumberOfTimes90DaysLate','NumberOfTime60-89DaysPastDueNotWorse']], palette='Set2')plt.xticks(rotation=20) (array([0, 1, 2]), &lt;a list of 3 Text xticklabel objects&gt;) 1234data=data[data['NumberOfTime30-59DaysPastDueNotWorse']&lt;80]#再次检查异常点sns.boxplot(data=data[['NumberOfTime30-59DaysPastDueNotWorse','NumberOfTimes90DaysLate','NumberOfTime60-89DaysPastDueNotWorse']], palette='Set2')plt.xticks(rotation=20) (array([0, 1, 2]), &lt;a list of 3 Text xticklabel objects&gt;) 12#月收入和年龄变量的分布sns.boxplot(x='MonthlyIncome', data=data) &lt;matplotlib.axes._subplots.AxesSubplot at 0x10f596b70&gt; 123print('%.2f%% of customers monthly income under 40000.' %(data.loc[data['MonthlyIncome']&lt;=40000].shape[0]*100/data.shape[0]))#月收入绝大部分集中在40000以下，可画出对应的月收入的分布sns.distplot(data.loc[data['MonthlyIncome']&lt;=40000,'MonthlyIncome'], bins=80, label='MonthlyIncome dist', kde=False) 99.69% of customers monthly income under 40000. &lt;matplotlib.axes._subplots.AxesSubplot at 0x107f14048&gt; 1sns.distplot(data['age'], bins=30, label='age dist', kde=True) &lt;matplotlib.axes._subplots.AxesSubplot at 0x10e075978&gt; 特征工程123456#训练集与测试集划分from sklearn.model_selection import train_test_splity = data['SeriousDlqin2yrs']X = data.iloc[:,1:]X_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.3, random_state=10) 123456789101112131415161718192021222324252627282930# 定义最优分箱函数import scipy.stats as statsdef mono_bin(Y, X, n = 20): r = 0 total_bad=Y.sum() total_good=Y.count()-total_bad #print(total_bad, total_good) while np.abs(r) &lt; 1: d1 = pd.DataFrame(&#123;\"X\": X, \"Y\": Y, \"Bucket\": pd.qcut(X, n)&#125;) d2 = d1.groupby('Bucket', as_index = True) r, p = stats.spearmanr(d2.mean().X, d2.mean().Y) n = n - 1 d3 = pd.DataFrame(d2.X.min(), columns = ['min']) d3['min']=d2.min().X d3['max'] = d2.max().X d3['bad'] = d2.sum().Y d3['good'] = d2.count().Y-d3['bad'] d3['bad_rate'] = d2.mean().Y d3['woe']=np.log(((d2.count().Y-d2.sum().Y)/total_good)/(d2.sum().Y/total_bad)) iv = ((d3['good']/total_good - d3['bad']/total_bad)*d3['woe']).sum() d4 = (d3.sort_index(by = 'min')).reset_index(drop=True) woe = list(d4['woe'].round(3)) cut=[] cut.append(float('-inf')) for i in range(1, n+1): qua = X.quantile(i / (n+1)) cut.append(round(qua, 4)) cut.append(float('inf')) return d4, iv, cut, woe 12#举例，将‘age’最优分箱mono_bin(y, data['age'], n=10) ( min max bad good bad_rate woe 0 21 33 1816 14471 0.111500 -0.561845 1 34 40 1664 16073 0.093815 -0.369439 2 41 45 1360 14683 0.084772 -0.258150 3 46 49 1209 13619 0.081535 -0.215683 4 50 54 1298 16516 0.072864 -0.093851 5 55 59 913 15757 0.054769 0.210948 6 60 64 690 15923 0.041534 0.501473 7 65 71 414 14194 0.028341 0.897353 8 72 99 341 14403 0.023128 1.105954, 0.2414021266070617, [-inf, 33.0, 40.0, 45.0, 49.0, 54.0, 59.0, 64.0, 71.0, inf], [-0.562, -0.369, -0.258, -0.216, -0.094, 0.211, 0.501, 0.897, 1.106]) 123456#每个变量的个数，从而确定连续变量与分类变量var_lst=data.columns[1:]var_num=&#123;&#125;for var in var_lst: var_num[var]=len(data[var].unique())var_num {&apos;RevolvingUtilizationOfUnsecuredLines&apos;: 122950, &apos;age&apos;: 79, &apos;NumberOfTime30-59DaysPastDueNotWorse&apos;: 14, &apos;DebtRatio&apos;: 114065, &apos;MonthlyIncome&apos;: 13592, &apos;NumberOfOpenCreditLinesAndLoans&apos;: 58, &apos;NumberOfTimes90DaysLate&apos;: 17, &apos;NumberRealEstateLoansOrLines&apos;: 28, &apos;NumberOfTime60-89DaysPastDueNotWorse&apos;: 11, &apos;NumberOfDependents&apos;: 13} 12345#将四个连续变量最优分箱x1_df, x1_iv, x1_cut, x1_woe = mono_bin( y_train, X_train['RevolvingUtilizationOfUnsecuredLines'], n=10)x2_df, x2_iv, x2_cut, x2_woe = mono_bin( y_train, X_train['age'], n=10)x4_df, x4_iv, x4_cut, x4_woe = mono_bin( y_train, X_train['DebtRatio'], n=10)x5_df, x5_iv, x5_cut, x5_woe = mono_bin( y_train, X_train['MonthlyIncome'], n=10) 123456789101112131415161718#不能最优分箱的变量则进行手动分箱，WOE计算函数def woe_value(Y, X, cut): total_bad=Y.sum() total_good=Y.count()-total_bad d1 = pd.DataFrame(&#123;\"X\": X, \"Y\": Y, \"Bucket\": cut&#125;) d2 = d1.groupby('Bucket', as_index = True) d3 = pd.DataFrame(d2.X.min(), columns = ['min']) d3['min']=d2.min().X d3['max'] = d2.max().X d3['bad'] = d2.sum().Y d3['good'] = d2.count().Y-d3['bad'] d3['bad_rate'] = d2.mean().Y d3['woe']=np.log(((d2.count().Y-d2.sum().Y)/total_good)/(d2.sum().Y/total_bad)) iv = ((d3['good']/total_good - d3['bad']/total_bad)*d3['woe']).sum() d4 = (d3.sort_index(by = 'min')).reset_index(drop=True) woe = list(d4['woe'].round(3)) return d4, iv, woe 1234567891011121314151617181920x3_cut = [-np.Inf, 0, 1, 3, 5, np.Inf]x6_cut = [-np.Inf, 1, 2, 3, 5, np.Inf]x7_cut = [-np.Inf, 0, 1, 3, 5, np.Inf]x8_cut = [-np.Inf, 0, 1, 2, 3, np.Inf]x9_cut = [-np.Inf, 0, 1, 3, np.Inf]x10_cut = [-np.Inf, 0, 1, 2, 3, 5, np.Inf]x3_bin = pd.cut(X_train['NumberOfTime30-59DaysPastDueNotWorse'], bins= x3_cut)x6_bin = pd.cut(X_train['NumberOfOpenCreditLinesAndLoans'], bins= x6_cut)x7_bin = pd.cut(X_train['NumberOfTimes90DaysLate'], bins=x7_cut)x8_bin = pd.cut(X_train['NumberRealEstateLoansOrLines'], bins=x8_cut)x9_bin = pd.cut(X_train['NumberOfTime60-89DaysPastDueNotWorse'], bins=x9_cut)x10_bin = pd.cut(X_train['NumberOfDependents'], bins=x10_cut)x3_df, x3_iv, x3_woe = woe_value(y_train, X_train['NumberOfTime30-59DaysPastDueNotWorse'], x3_bin)x6_df, x6_iv, x6_woe = woe_value(y_train, X_train['NumberOfOpenCreditLinesAndLoans'], x6_bin)x7_df, x7_iv, x7_woe = woe_value(y_train, X_train['NumberOfTimes90DaysLate'], x7_bin)x8_df, x8_iv, x8_woe = woe_value(y_train, X_train['NumberRealEstateLoansOrLines'], x8_bin)x9_df, x9_iv, x9_woe = woe_value(y_train, X_train['NumberOfTime60-89DaysPastDueNotWorse'], x9_bin)x10_df, x10_iv, x10_woe = woe_value(y_train, X_train['NumberOfDependents'], x10_bin) 12345678910#相关性分析corr = data.corr()xticks = ['x'+str(i) for i in range(12)]yticks = list(data.columns)fig = plt.figure()ax1 = fig.add_subplot(111)sns.heatmap(corr, cmap='GnBu', annot=True, ax= ax1, annot_kws=&#123;'size':6, 'color':'red'&#125;)ax1.set_xticklabels(xticks, rotation=0, fontsize=10)ax1.set_yticklabels(yticks, rotation=0, fontsize=10)plt.show() 123456#从相关系数热力图可以看出，自变量之间的线性相关性比较弱#画出每个变量的IV值iv = [eval('x'+str(i)+'_iv') for i in range(1,11)]index=['x'+str(i) for i in range(1,11)]sns.barplot(x=index, y=iv)plt.ylabel('IV') Text(0,0.5,&apos;IV&apos;) 12345678910111213141516171819#选x1, x2, x3, x7, x9， IV&gt;0.2高预测性#WOE编码x1= 'RevolvingUtilizationOfUnsecuredLines'x2= 'age'x3= 'NumberOfTime30-59DaysPastDueNotWorse'x7= 'NumberOfTimes90DaysLate'x9= 'NumberOfTime60-89DaysPastDueNotWorse'#定义WOE编码函数def woe_trans(data, var, woe, cut): woe_name = var+'_woe' for i in range(len(woe)): if i == 0: data.loc[(data[var]&lt;=cut[i+1]), woe_name] = woe[i] elif ((i&gt;0) and (i&lt;=(len(woe)-2))): data.loc[((data[var]&lt;=cut[i+1]) &amp; (data[var]&gt;cut[i])), woe_name] = woe[i] else: data.loc[(data[var]&gt;cut[i]), woe_name] = woe[i] return data 12for i in [1,2,3,7,9]: X_train = woe_trans(X_train, eval('x'+str(i)), eval('x'+str(i)+'_woe'), eval('x'+str(i)+'_cut')) 12#选取WOE编码之后的列作为训练数据集X_train = X_train.iloc[:, -5:] 4. 模型开发123456#建立逻辑回归模型import statsmodels.api as smX1=sm.add_constant(X_train)logit=sm.Logit(y_train, X1)result=logit.fit()print(result.summary()) Optimization terminated successfully. Current function value: 0.185840 Iterations 8 Logit Regression Results ============================================================================== Dep. Variable: SeriousDlqin2yrs No. Observations: 101740 Model: Logit Df Residuals: 101734 Method: MLE Df Model: 5 Date: Thu, 20 Sep 2018 Pseudo R-squ.: 0.2382 Time: 21:57:47 Log-Likelihood: -18907. converged: True LL-Null: -24820. LLR p-value: 0.000 ============================================================================================================ coef std err z P&gt;|z| [0.025 0.975] ------------------------------------------------------------------------------------------------------------ const -2.6195 0.015 -171.961 0.000 -2.649 -2.590 RevolvingUtilizationOfUnsecuredLines_woe -0.6441 0.016 -41.387 0.000 -0.675 -0.614 age_woe -0.4992 0.033 -15.294 0.000 -0.563 -0.435 NumberOfTime30-59DaysPastDueNotWorse_woe -0.5455 0.016 -34.470 0.000 -0.577 -0.515 NumberOfTimes90DaysLate_woe -0.5683 0.014 -41.833 0.000 -0.595 -0.542 NumberOfTime60-89DaysPastDueNotWorse_woe -0.4019 0.017 -23.032 0.000 -0.436 -0.368 ============================================================================================================ 5. 模型评估1234#对测试集进行WOE编码for i in [1,2,3,7,9]: X_test = woe_trans(X_test, eval('x'+str(i)), eval('x'+str(i)+'_woe'), eval('x'+str(i)+'_cut'))X_test = X_test.iloc[:, -5:] 123456789101112131415#绘制ROC曲线，计算AUCfrom sklearn import metricsX2=sm.add_constant(X_test)y_pred = result.predict(X2)fpr, tpr, threshold = metrics.roc_curve(y_test, y_pred)auc = metrics.auc(fpr, tpr)plt.plot(fpr, tpr, 'b', label='AUC=%.2f' %auc)plt.legend(loc='lower right')plt.plot([0,1], [0,1], 'r--')plt.xlim([0,1])plt.ylim([0,1])plt.xlabel('FPR')plt.ylabel('TPR')plt.show() 6. 评分系统建立12345678910#分数计算函数PDO=20base=600#all_woe是某一个体所有相关变量woe编码值构成的序列#total_score = base- PDO*(all_woe.dot(coef))/np.log(2)factor= -PDO/np.log(2)coef = result.paramsdef get_score(coef, woe, factor): scores=[round(coef*woe[i]*factor, 0) for i in range(len(woe))] return scores 1234567#计算各因子每个区间对应的分数x1_scores=get_score(coef[1], x1_woe, factor)print(x1_scores)x2_scores=get_score(coef[2], x2_woe, factor)x3_scores=get_score(coef[3], x3_woe, factor)x7_scores=get_score(coef[4], x7_woe, factor)x9_scores=get_score(coef[5], x9_woe, factor) [24.0, 23.0, 5.0, -20.0] 12data.head()datacopy=data 1data=datacopy 123for i in [1,2,3,7,9]: data = woe_trans(data, eval('x'+str(i)), eval('x'+str(i)+'_woe'), eval('x'+str(i)+'_cut'))data = data.iloc[:, -5:] 1234#对整个data进行打分计算data_c=sm.add_constant(data) data['score']=500 + round(data_c.dot(coef)*factor, 0) data.head(10) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } RevolvingUtilizationOfUnsecuredLines_woe age_woe NumberOfTime30-59DaysPastDueNotWorse_woe NumberOfTimes90DaysLate_woe NumberOfTime60-89DaysPastDueNotWorse_woe score 0 -1.097 -0.264 -1.720 0.373 0.267 534.0 1 -1.097 -0.371 0.515 0.373 0.267 567.0 2 -1.097 -0.371 -0.878 -1.969 0.267 507.0 3 0.284 -0.564 0.515 0.373 0.267 590.0 4 -1.097 -0.184 -0.878 0.373 0.267 548.0 5 0.284 1.094 0.515 0.373 0.267 614.0 6 0.284 0.216 0.515 0.373 0.267 601.0 7 -1.097 -0.371 0.515 0.373 0.267 567.0 9 0.284 0.216 0.515 0.373 0.267 601.0 10 -1.097 -0.564 0.515 0.373 0.267 564.0","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"}],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://yoursite.com/tags/Machine-Learning/"}],"keywords":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/categories/机器学习/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-02-15T08:09:15.599Z","updated":"2019-02-15T08:09:15.599Z","comments":true,"path":"2019/02/15/hello-world/","link":"","permalink":"http://yoursite.com/2019/02/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]},{"title":"K-Means","slug":"k-Means","date":"2019-02-15T05:30:45.000Z","updated":"2019-02-15T08:09:15.599Z","comments":true,"path":"2019/02/15/k-Means/","link":"","permalink":"http://yoursite.com/2019/02/15/k-Means/","excerpt":"","text":"电影评分的 k 均值聚类假设你是 Netflix 的一名数据分析师，你想要根据用户对不同电影的评分研究用户在电影品位上的相似和不同之处。了解这些评分对用户电影推荐系统有帮助吗？我们来研究下这方面的数据。 我们将使用的数据来自精彩的 MovieLens 用户评分数据集。我们稍后将在 notebook 中查看每个电影评分，先看看不同类型之间的评分比较情况。 数据集概述该数据集有两个文件。我们将这两个文件导入 pandas dataframe 中： 123456789import pandas as pdimport matplotlib.pyplot as pltimport numpy as npfrom scipy.sparse import csr_matriximport helper# Import the Movies datasetmovies = pd.read_csv('ml-latest-small/movies.csv')movies.head() .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } movieId title genres 0 1 Toy Story (1995) Adventure|Animation|Children|Comedy|Fantasy 1 2 Jumanji (1995) Adventure|Children|Fantasy 2 3 Grumpier Old Men (1995) Comedy|Romance 3 4 Waiting to Exhale (1995) Comedy|Drama|Romance 4 5 Father of the Bride Part II (1995) Comedy 123# Import the ratings datasetratings = pd.read_csv('ml-latest-small/ratings.csv')ratings.head() .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } userId movieId rating timestamp 0 1 31 2.5 1260759144 1 1 1029 3.0 1260759179 2 1 1061 3.0 1260759182 3 1 1129 2.0 1260759185 4 1 1172 4.0 1260759205 现在我们已经知道数据集的结构，每个表格中有多少条记录。 1print('The dataset contains: ', len(ratings), ' ratings of ', len(movies), ' movies.') The dataset contains: 100004 ratings of 9125 movies. 爱情片与科幻片我们先查看一小部分用户，并看看他们喜欢什么类型的电影。我们将大部分数据预处理过程都隐藏在了辅助函数中，并重点研究聚类概念。在完成此 notebook 后，建议你快速浏览下 helper.py，了解这些辅助函数是如何实现的。 1234# Calculate the average rating of romance and scifi moviesgenre_ratings = helper.get_genre_ratings(ratings, movies, ['Romance', 'Sci-Fi'], ['avg_romance_rating', 'avg_scifi_rating'])genre_ratings.head() .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } avg_romance_rating avg_scifi_rating userId 1 3.50 2.40 2 3.59 3.80 3 3.65 3.14 4 4.50 4.26 5 4.08 4.00 函数 get_genre_ratings 计算了每位用户对所有爱情片和科幻片的平均评分。我们对数据集稍微进行偏倚，删除同时喜欢科幻片和爱情片的用户，使聚类能够将他们定义为更喜欢其中一种类型。 1234biased_dataset = helper.bias_genre_rating_dataset(genre_ratings, 3.2, 2.5)print( \"Number of records: \", len(biased_dataset))biased_dataset.head() Number of records: 183 .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } userId avg_romance_rating avg_scifi_rating 0 1 3.50 2.40 1 3 3.65 3.14 2 6 2.90 2.75 3 7 2.93 3.36 4 12 2.89 2.62 可以看出我们有 183 位用户，对于每位用户，我们都得出了他们对看过的爱情片和科幻片的平均评分。 我们来绘制该数据集： 123%matplotlib inlinehelper.draw_scatterplot(biased_dataset['avg_scifi_rating'],'Avg scifi rating', biased_dataset['avg_romance_rating'], 'Avg romance rating') 我们可以在此样本中看到明显的偏差（我们故意创建的）。如果使用 k 均值将样本分成两组，效果如何？ 12# Let's turn our dataset into a listX = biased_dataset[['avg_scifi_rating','avg_romance_rating']].values 导入 KMeans 通过 n_clusters = 2 准备 KMeans 将数据集 X 传递给 KMeans 的 fit_predict 方法，并将聚类标签放入 predictions 1234567891011# TODO: Import KMeansfrom sklearn.cluster import KMeans# TODO: Create an instance of KMeans to find two clusterskmeans_1 = KMeans(n_clusters = 2)# TODO: use fit_predict to cluster the datasetpredictions = kmeans_1.fit_predict(X)# Plothelper.draw_clusters(biased_dataset, predictions) 可以看出分组的依据主要是每个人对爱情片的评分高低。如果爱情片的平均评分超过 3 星，则属于第一组，否则属于另一组。 如果分成三组，会发生什么？ 123456789# TODO: Create an instance of KMeans to find three clusterskmeans_2 = KMeans(n_clusters = 3)# TODO: use fit_predict to cluster the datasetpredictions_2 = kmeans_2.fit_predict(X)# Plothelper.draw_clusters(biased_dataset, predictions_2) 现在平均科幻片评分开始起作用了，分组情况如下所示： 喜欢爱情片但是不喜欢科幻片的用户 喜欢科幻片但是不喜欢爱情片的用户 即喜欢科幻片又喜欢爱情片的用户 再添加一组 12345678# TODO: Create an instance of KMeans to find four clusterskmeans_3 = KMeans(n_clusters = 4)# TODO: use fit_predict to cluster the datasetpredictions_3 = kmeans_3.fit_predict(X)# Plothelper.draw_clusters(biased_dataset, predictions_3) 可以看出将数据集分成的聚类越多，每个聚类中用户的兴趣就相互之间越相似。 选择 K我们可以将数据点拆分为任何数量的聚类。对于此数据集来说，正确的聚类数量是多少？ 可以通过多种方式选择聚类 k。我们将研究一种简单的方式，叫做“肘部方法”。肘部方法会绘制 k 的上升值与使用该 k 值计算的总误差分布情况。 如何计算总误差？ 一种方法是计算平方误差。假设我们要计算 k=2 时的误差。有两个聚类，每个聚类有一个“图心”点。对于数据集中的每个点，我们将其坐标减去所属聚类的图心。然后将差值结果取平方（以便消除负值），并对结果求和。这样就可以获得每个点的误差值。如果将这些误差值求和，就会获得 k=2 时所有点的总误差。 现在的一个任务是对每个 k（介于 1 到数据集中的元素数量之间）执行相同的操作。 123456# Choose the range of k values to test.# We added a stride of 5 to improve performance. We don't need to calculate the error for every k valuepossible_k_values = range(2, len(X)+1, 5)# Calculate error values for all k values we're interested inerrors_per_k = [helper.clustering_errors(k, X) for k in possible_k_values] 12# Optional: Look at the values of K vs the silhouette score of running K-means with that value of klist(zip(possible_k_values, errors_per_k)) [(2, 0.35588178764728251), (7, 0.37324118163771741), (12, 0.35650856326047475), (17, 0.3741137698024623), (22, 0.37718217339438476), (27, 0.36071909992215945), (32, 0.37104279808464452), (37, 0.3649882241766923), (42, 0.36895091450195883), (47, 0.37696003940733186), (52, 0.38716548900081571), (57, 0.35079775582937778), (62, 0.34916584233387205), (67, 0.34839937724907), (72, 0.34907390154971468), (77, 0.34837739216196456), (82, 0.3309353056966266), (87, 0.34005916910201761), (92, 0.32494553685658306), (97, 0.32418331059507227), (102, 0.31329160485165003), (107, 0.29407239955320186), (112, 0.27366896911138017), (117, 0.28906341363336779), (122, 0.27342563040040624), (127, 0.25219179857975438), (132, 0.25320773897416415), (137, 0.2412264569953621), (142, 0.21855949198498667), (147, 0.19924498428850082), (152, 0.18722856283659275), (157, 0.16447514022082693), (162, 0.14697529680439808), (167, 0.12609539969216882), (172, 0.096865005870864829), (177, 0.064230120163174503), (182, 0.054644808743169397)] 123456789101112131415# Plot the each value of K vs. the silhouette score at that valuefig, ax = plt.subplots(figsize=(16, 6))ax.set_xlabel('K - number of clusters')ax.set_ylabel('Silhouette Score (higher is better)')ax.plot(possible_k_values, errors_per_k)# Ticks and gridxticks = np.arange(min(possible_k_values), max(possible_k_values)+1, 5.0)ax.set_xticks(xticks, minor=False)ax.set_xticks(xticks, minor=True)ax.xaxis.grid(True, which='both')yticks = np.arange(round(min(errors_per_k), 2), max(errors_per_k), .05)ax.set_yticks(yticks, minor=False)ax.set_yticks(yticks, minor=True)ax.yaxis.grid(True, which='both') 看了该图后发现，合适的 k 值包括 7、22、27、32 等（每次运行时稍微不同）。聚类 (k) 数量超过该范围将开始导致糟糕的聚类情况（根据轮廓分数） 我会选择 k=7，因为更容易可视化： 12345678# TODO: Create an instance of KMeans to find seven clusterskmeans_4 = KMeans(n_clusters=7)# TODO: use fit_predict to cluster the datasetpredictions_4 = kmeans_4.fit_predict(X)# plothelper.draw_clusters(biased_dataset, predictions_4, cmap='Accent') 注意：当你尝试绘制更大的 k 值（超过 10）时，需要确保你的绘制库没有对聚类重复使用相同的颜色。对于此图，我们需要使用 matplotlib colormap ‘Accent’，因为其他色图要么颜色之间的对比度不强烈，要么在超过 8 个或 10 个聚类后会重复利用某些颜色。 再加入动作片类型到目前为止，我们只查看了用户如何对爱情片和科幻片进行评分。我们再添加另一种类型，看看加入动作片类型后效果如何。 现在数据集如下所示： 1234567biased_dataset_3_genres = helper.get_genre_ratings(ratings, movies, ['Romance', 'Sci-Fi', 'Action'], ['avg_romance_rating', 'avg_scifi_rating', 'avg_action_rating'])biased_dataset_3_genres = helper.bias_genre_rating_dataset(biased_dataset_3_genres, 3.2, 2.5).dropna()print( \"Number of records: \", len(biased_dataset_3_genres))biased_dataset_3_genres.head() Number of records: 183 .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } userId avg_romance_rating avg_scifi_rating avg_action_rating 0 1 3.50 2.40 2.80 1 3 3.65 3.14 3.47 2 6 2.90 2.75 3.27 3 7 2.93 3.36 3.29 4 12 2.89 2.62 3.21 123X_with_action = biased_dataset_3_genres[['avg_scifi_rating', 'avg_romance_rating', 'avg_action_rating']].values 12345678# TODO: Create an instance of KMeans to find seven clusterskmeans_5 = KMeans(n_clusters=7)# TODO: use fit_predict to cluster the datasetpredictions_5 = kmeans_5.fit_predict(X_with_action)# plothelper.draw_clusters_3d(biased_dataset_3_genres, predictions_5) 我们依然分别用 x 轴和 y 轴表示科幻片和爱情片。并用点的大小大致表示动作片评分情况（更大的点表示平均评分超过 3 颗星，更小的点表示不超过 3 颗星 ）。 可以看出添加类型后，用户的聚类分布发生了变化。为 k 均值提供的数据越多，每组中用户之间的兴趣越相似。但是如果继续这么绘制，我们将无法可视化二维或三维之外的情形。在下个部分，我们将使用另一种图表，看看多达 50 个维度的聚类情况。 电影级别的聚类现在我们已经知道 k 均值会如何根据用户的类型品位对用户进行聚类，我们再进一步分析，看看用户对单个影片的评分情况。为此，我们将数据集构建成 userId 与用户对每部电影的评分形式。例如，我们来看看以下数据集子集： 123456# Merge the two tables then pivot so we have Users X Movies dataframeratings_title = pd.merge(ratings, movies[['movieId', 'title']], on='movieId' )user_movie_ratings = pd.pivot_table(ratings_title, index='userId', columns= 'title', values='rating')print('dataset dimensions: ', user_movie_ratings.shape, '\\n\\nSubset example:')user_movie_ratings.iloc[:6, :10] dataset dimensions: (671, 9064) Subset example: .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } title “Great Performances” Cats (1998) $9.99 (2008) ‘Hellboy’: The Seeds of Creation (2004) ‘Neath the Arizona Skies (1934) ‘Round Midnight (1986) ‘Salem’s Lot (2004) ‘Til There Was You (1997) ‘burbs, The (1989) ‘night Mother (1986) (500) Days of Summer (2009) userId 1 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 2 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 3 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 4 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 5 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 6 NaN NaN NaN NaN NaN NaN NaN 4.0 NaN NaN NaN 值的优势表明了第一个问题。大多数用户没有看过大部分电影，并且没有为这些电影评分。这种数据集称为“稀疏”数据集，因为只有少数单元格有值。 为了解决这一问题，我们按照获得评分次数最多的电影和对电影评分次数最多的用户排序。这样可以形成更“密集”的区域，使我们能够查看数据集的顶部数据。 如果我们要选择获得评分次数最多的电影和对电影评分次数最多的用户，则如下所示： 123456n_movies = 30n_users = 18most_rated_movies_users_selection = helper.sort_by_rating_density(user_movie_ratings, n_movies, n_users)print('dataset dimensions: ', most_rated_movies_users_selection.shape)most_rated_movies_users_selection.head() dataset dimensions: (18, 30) .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } title Forrest Gump (1994) Pulp Fiction (1994) Shawshank Redemption, The (1994) Silence of the Lambs, The (1991) Star Wars: Episode IV - A New Hope (1977) Jurassic Park (1993) Matrix, The (1999) Toy Story (1995) Schindler’s List (1993) Terminator 2: Judgment Day (1991) … Dances with Wolves (1990) Fight Club (1999) Usual Suspects, The (1995) Seven (a.k.a. Se7en) (1995) Lion King, The (1994) Godfather, The (1972) Lord of the Rings: The Fellowship of the Ring, The (2001) Apollo 13 (1995) True Lies (1994) Twelve Monkeys (a.k.a. 12 Monkeys) (1995) 29 5.0 5.0 5.0 4.0 4.0 4.0 3.0 4.0 5.0 4.0 … 5.0 4.0 5.0 4.0 3.0 5.0 3.0 5.0 4.0 2.0 508 4.0 5.0 4.0 4.0 5.0 3.0 4.5 3.0 5.0 2.0 … 5.0 4.0 5.0 4.0 3.5 5.0 4.5 3.0 2.0 4.0 14 1.0 5.0 2.0 5.0 5.0 3.0 5.0 2.0 4.0 4.0 … 3.0 5.0 5.0 5.0 4.0 5.0 5.0 3.0 4.0 4.0 72 5.0 5.0 5.0 4.5 4.5 4.0 4.5 5.0 5.0 3.0 … 4.5 5.0 5.0 5.0 5.0 5.0 5.0 3.5 3.0 5.0 653 4.0 5.0 5.0 4.5 5.0 4.5 5.0 5.0 5.0 5.0 … 4.5 5.0 5.0 4.5 5.0 4.5 5.0 5.0 4.0 5.0 5 rows × 30 columns 这样更好分析。我们还需要指定一个可视化这些评分的良好方式，以便在查看更庞大的子集时能够直观地识别这些评分（稍后变成聚类）。 我们使用颜色代替评分数字： 1helper.draw_movies_heatmap(most_rated_movies_users_selection) 每列表示一部电影。每行表示一位用户。单元格的颜色根据图表右侧的刻度表示用户对该电影的评分情况。 注意到某些单元格是白色吗？表示相应用户没有对该电影进行评分。在现实中进行聚类时就会遇到这种问题。与一开始经过整理的示例不同，现实中的数据集经常比较稀疏，数据集中的部分单元格没有值。这样的话，直接根据电影评分对用户进行聚类不太方便，因为 k 均值通常不喜欢缺失值。 为了提高性能，我们将仅使用 1000 部电影的评分（数据集中一共有 9000 部以上）。 12user_movie_ratings = pd.pivot_table(ratings_title, index='userId', columns= 'title', values='rating')most_rated_movies_1k = helper.get_most_rated_movies(user_movie_ratings, 1000) 为了使 sklearn 对像这样缺少值的数据集运行 k 均值聚类，我们首先需要将其转型为稀疏 csr 矩阵类型（如 SciPi 库中所定义）。 要从 pandas dataframe 转换为稀疏矩阵，我们需要先转换为 SparseDataFrame，然后使用 pandas 的 to_coo() 方法进行转换。 注意：只有较新版本的 pandas 具有to_coo()。如果你在下个单元格中遇到问题，确保你的 pandas 是最新版本。 1sparse_ratings = csr_matrix(pd.SparseDataFrame(most_rated_movies_1k).to_coo()) 我们来聚类吧！对于 k 均值，我们需要指定 k，即聚类数量。我们随意地尝试 k=20（选择 k 的更佳方式如上述肘部方法所示。但是，该方法需要一定的运行时间。): 12# 20 clusterspredictions = KMeans(n_clusters=20, algorithm='full').fit_predict(sparse_ratings) 为了可视化其中一些聚类，我们需要将每个聚类绘制成热图： 12345max_users = 70max_movies = 50clustered = pd.concat([most_rated_movies_1k.reset_index(), pd.DataFrame(&#123;'group':predictions&#125;)], axis=1)helper.draw_movie_clusters(clustered, max_users, max_movies) cluster # 7 # of users in cluster: 276. # of users in plot: 70 cluster # 16 # of users in cluster: 64. # of users in plot: 64 cluster # 0 # of users in cluster: 26. # of users in plot: 26 cluster # 2 # of users in cluster: 72. # of users in plot: 70 cluster # 6 # of users in cluster: 17. # of users in plot: 17 cluster # 3 # of users in cluster: 37. # of users in plot: 37 cluster # 11 # of users in cluster: 12. # of users in plot: 12 cluster # 18 # of users in cluster: 35. # of users in plot: 35 cluster # 9 # of users in cluster: 55. # of users in plot: 55 cluster # 8 # of users in cluster: 27. # of users in plot: 27 cluster # 15 # of users in cluster: 15. # of users in plot: 15 需要注意以下几个事项： 聚类中的评分越相似，你在该聚类中就越能发现颜色相似的垂直线。 在聚类中发现了非常有趣的规律： 某些聚类比其他聚类更稀疏，其中的用户可能比其他聚类中的用户看的电影更少，评分的电影也更少。 某些聚类主要是黄色，汇聚了非常喜欢特定类型电影的用户。其他聚类主要是绿色或海蓝色，表示这些用户都认为某些电影可以评 2-3 颗星。 注意每个聚类中的电影有何变化。图表对数据进行了过滤，仅显示评分最多的电影，然后按照平均评分排序。 能找到《指环王》在每个聚类中位于哪个位置吗？《星球大战》呢？ 很容易发现具有相似颜色的水平线，表示评分变化不大的用户。这可能是 Netflix 从基于星级的评分切换到喜欢/不喜欢评分的原因之一。四颗星评分对不同的人来说，含义不同。 我们在可视化聚类时，采取了一些措施（过滤/排序/切片）。因为这种数据集比较“稀疏”，大多数单元格没有值（因为大部分用户没有看过大部分电影）。 预测我们选择一个聚类和一位特定的用户，看看该聚类可以使我们执行哪些实用的操作。 首先选择一个聚类： 12345678910# TODO: Pick a cluster ID from the clusters abovecluster_number = 11# Let's filter to only see the region of the dataset with the most number of values n_users = 75n_movies = 300cluster = clustered[clustered.group == cluster_number].drop(['index', 'group'], axis=1)cluster = helper.sort_by_rating_density(cluster, n_movies, n_users)helper.draw_movies_heatmap(cluster, axis_labels=False) 聚类中的实际评分如下所示： 1cluster.fillna('').head() .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; } Amadeus (1984) Annie Hall (1977) One Flew Over the Cuckoo’s Nest (1975) Fargo (1996) Cool Hand Luke (1967) Chinatown (1974) North by Northwest (1959) Citizen Kane (1941) Wizard of Oz, The (1939) Raiders of the Lost Ark (Indiana Jones and the Raiders of the Lost Ark) (1981) … Sense and Sensibility (1995) Top Gun (1986) Flashdance (1983) Jerry Maguire (1996) Superman (1978) Abyss, The (1989) Devil in a Blue Dress (1995) Beetlejuice (1988) Dial M for Murder (1954) Broken Arrow (1996) 0 5.0 4.0 4.0 5 4 4 4 5 4 … 3 3 3 4 3 1 4.0 4.0 4.0 4 5 5 3 5 4 3 … 2 3 2 4 2 3 2 5.0 4.0 5.0 5 5 5 5 5 5 5 … 3 4 5 4 8 2.0 5.0 2.0 5 3 5 3 4 5 3 … 4.5 2 4 3 3 3 10 3.0 4.0 3.0 4 5 4 4 4 5 … 5 4 3 2 5 rows × 300 columns 从表格中选择一个空白单元格。因为用户没有对该电影评分，所以是空白状态。能够预测她是否喜欢该电影吗？因为该用户属于似乎具有相似品位的用户聚类，我们可以计算该电影在此聚类中的平均评分，结果可以作为她是否喜欢该电影的合理预测依据。 12345# TODO: Fill in the name of the column/movie. e.g. 'Forrest Gump (1994)'# Pick a movie from the table above since we're looking at a subsetmovie_name = 'Forrest Gump (1994)'cluster[movie_name].mean() 3.6666666666666665 这就是我们关于她会如何对该电影进行评分的预测。 推荐我们回顾下上一步的操作。我们使用 k 均值根据用户的评分对用户进行聚类。这样就形成了具有相似评分的用户聚类，因此通常具有相似的电影品位。基于这一点，当某个用户对某部电影没有评分时，我们对该聚类中所有其他用户的评分取平均值，该平均值就是我们猜测该用户对该电影的喜欢程度。 根据这一逻辑，如果我们计算该聚类中每部电影的平均分数，就可以判断该“品位聚类”对数据集中每部电影的喜欢程度。 12# The average rating of 20 movies as rated by the users in the clustercluster.mean().head(20) Amadeus (1984) 3.833333 Annie Hall (1977) 4.291667 One Flew Over the Cuckoo&apos;s Nest (1975) 4.208333 Fargo (1996) 4.454545 Cool Hand Luke (1967) 4.636364 Chinatown (1974) 4.454545 North by Northwest (1959) 4.409091 Citizen Kane (1941) 4.681818 Wizard of Oz, The (1939) 4.500000 Raiders of the Lost Ark (Indiana Jones and the Raiders of the Lost Ark) (1981) 4.272727 Butch Cassidy and the Sundance Kid (1969) 4.045455 Star Wars: Episode V - The Empire Strikes Back (1980) 4.090909 Groundhog Day (1993) 3.727273 Gone with the Wind (1939) 4.272727 It&apos;s a Wonderful Life (1946) 4.272727 2001: A Space Odyssey (1968) 4.272727 Shawshank Redemption, The (1994) 4.363636 Philadelphia Story, The (1940) 4.409091 Bonnie and Clyde (1967) 4.150000 To Kill a Mockingbird (1962) 4.400000 dtype: float64 这对我们来说变得非常实用，因为现在我们可以使用它作为推荐引擎，使用户能够发现他们可能喜欢的电影。 当用户登录我们的应用时，现在我们可以向他们显示符合他们的兴趣品位的电影。推荐方式是选择聚类中该用户尚未评分的最高评分的电影。 12345678910111213141516# TODO: Pick a user ID from the dataset# Look at the table above outputted by the command \"cluster.fillna('').head()\" # and pick one of the user ids (the first column in the table)user_id = 11# Get all this user's ratingsuser_2_ratings = cluster.loc[user_id, :]# Which movies did they not rate? (We don't want to recommend movies they've already rated)user_2_unrated_movies = user_2_ratings[user_2_ratings.isnull()]# What are the ratings of these movies the user did not rate?avg_ratings = pd.concat([user_2_unrated_movies, cluster.mean()], axis=1, join='inner').loc[:,0]# Let's sort by rating so the highest rated movies are presented firstavg_ratings.sort_values(ascending=False)[:20] Remains of the Day, The (1993) 4.666667 Saving Private Ryan (1998) 4.642857 African Queen, The (1951) 4.625000 Lone Star (1996) 4.600000 Godfather: Part II, The (1974) 4.500000 Singin&apos; in the Rain (1952) 4.500000 My Cousin Vinny (1992) 4.500000 Raising Arizona (1987) 4.500000 Fargo (1996) 4.454545 Rain Man (1988) 4.400000 Full Metal Jacket (1987) 4.400000 Sense and Sensibility (1995) 4.375000 Fried Green Tomatoes (1991) 4.333333 Room with a View, A (1986) 4.300000 It&apos;s a Wonderful Life (1946) 4.272727 Dial M for Murder (1954) 4.250000 Laura (1944) 4.250000 American Graffiti (1973) 4.250000 Much Ado About Nothing (1993) 4.250000 Ordinary People (1980) 4.250000 Name: 0, dtype: float64 这些是向用户推荐的前 20 部电影！ 练习： 如果聚类中有一部电影只有一个评分，评分是 5 颗星。该电影在该聚类中的平均评分是多少？这会对我们的简单推荐引擎有何影响？你会如何调整推荐系统，以解决这一问题？ 关于协同过滤的更多信息 这是一个简单的推荐引擎，展示了“协同过滤”的最基本概念。有很多可以改进该引擎的启发法和方法。为了推动在这一领域的发展，Netflix 设立了 Netflix 奖项 ，他们会向对 Netflix 的推荐算法做出最大改进的算法奖励 1,000,000 美元。 在 2009 年，“BellKor’s Pragmatic Chaos”团队获得了这一奖项。这篇论文介绍了他们采用的方式，其中包含大量方法。 Netflix 最终并没有使用这个荣获 1,000,000 美元奖励的算法，因为他们采用了流式传输的方式，并产生了比电影评分要庞大得多的数据集——用户搜索了哪些内容？用户在此会话中试看了哪些其他电影？他们是否先看了一部电影，然后切换到了其他电影？这些新的数据点可以提供比评分本身更多的线索。 深入研究 该 notebook 显示了用户级推荐系统。我们实际上可以使用几乎一样的代码进行商品级推荐。例如亚马逊的“购买（评价或喜欢）此商品的客户也购买了（评价了或喜欢）以下商品：” 。我们可以在应用的每个电影页面显示这种推荐。为此，我们只需将数据集转置为“电影 X 用户”形状，然后根据评分之间的联系对电影（而不是用户）进行聚类。 我们从数据集 Movie Lens 中抽取了最小的子集，只包含 100,000 个评分。如果你想深入了解电影评分数据，可以查看他们的完整数据集，其中包含 2400 万个评分。","categories":[],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://yoursite.com/tags/Machine-Learning/"}],"keywords":[]},{"title":"CNN网络图像识别","slug":"My-First-Post","date":"2019-02-15T05:05:16.000Z","updated":"2019-02-15T10:19:04.357Z","comments":true,"path":"2019/02/15/My-First-Post/","link":"","permalink":"http://yoursite.com/2019/02/15/My-First-Post/","excerpt":"","text":"简介本文使用keras(2.1.4)—-其他版本有坑. 网络框架搭建CNN网络，对cifar10数据集进行图像识别，cifar10是一种自带label的图像数据集，数据集种类十分丰富可以很好的检验网络性能，话不多说直接进入正题 第一步获取数据集通过keras可以直接下载cifar10数据集(数据集比较大可能需要一些时间) 1234import keras#使用cifar10数据集from keras.datasets import cifar10(x_train, y_train), (x_test, y_test) = cifar10.load_data() 展示前24张图片观察数据集的部分样本别问为什么，要有一个程序员的严谨！！严谨！！严谨！！(重要的事说3遍) 1234567import numpy as npimport matplotlib.pyplot as pltfig = plt.figure(figsize=(20,5))for i in range(36): ax = fig.add_subplot(3, 12, i + 1, xticks=[], yticks=[]) ax.imshow(np.squeeze(x_train[i])) 所有数据集除以255重构图像因为图像单个像素中最大值为255，将其除以255是将每一个像素缩放到0-1之间，类似于标准化 12x_train = x_train.astype('float32')/255x_test = x_test.astype('float32')/255 将数据分解为测试集、训练集、验证集123456789101112131415161718from keras.utils import np_utils# 将标签转化为one-hotnum_classes = len(np.unique(y_train))y_train = keras.utils.to_categorical(y_train, num_classes)y_test = keras.utils.to_categorical(y_test, num_classes)# 将数据分解为训练集和测试集(x_train, x_valid) = x_train[5000:], x_train[:5000](y_train, y_valid) = y_train[5000:], y_train[:5000]# 输出训练集形状print('x_train shape:', x_train.shape)# 输出每一个集合的长度print(x_train.shape[0], 'train samples')print(x_test.shape[0], 'test samples')print(x_valid.shape[0], 'validation samples') 开始构建卷积神经网络12345678910111213141516171819202122232425from keras.models import Sequentialfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout#初始化网络类型，选择顺序网络model = Sequential()#添加卷积层，使用same填充，relu激活model.add(Conv2D(filters=16, kernel_size=2, padding='same', activation='relu', input_shape=(32, 32, 3)))#添加池化层model.add(MaxPooling2D(pool_size=2))model.add(Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))model.add(MaxPooling2D(pool_size=2))model.add(Conv2D(filters=64, kernel_size=2, padding='same', activation='relu'))model.add(MaxPooling2D(pool_size=2))#舍弃部分神经元，避免过拟合model.add(Dropout(0.3))#数据扁平化model.add(Flatten())model.add(Dense(500, activation='relu'))model.add(Dropout(0.4))model.add(Dense(10, activation='softmax'))#模型确认model.summary()#模型启动，定义损失函数，优化器，评分标准model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy']) 模型训练开始！心疼一波没有GPU的小伙伴。。。 12345678from keras.callbacks import ModelCheckpoint #训练模型checkpointer = ModelCheckpoint(filepath='model.weights.best.hdf5', verbose=1, save_best_only=True)hist = model.fit(x_train, y_train, batch_size=32, epochs=100, validation_data=(x_valid, y_valid), callbacks=[checkpointer], verbose=2, shuffle=True) 测试集预测终于到了激动人心的时刻，想不想知道自己搭建的模型的性能? 等着吧！ 12345# 获取训练集预测y_hat = model.predict(x_test)# 定义文本标签--来源:(source: https://www.cs.toronto.edu/~kriz/cifar.html)cifar10_labels = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck'] 结果展示！！！！！123456789# 展示样本训练结果fig = plt.figure(figsize=(20, 8))for i, idx in enumerate(np.random.choice(x_test.shape[0], size=32, replace=False)): ax = fig.add_subplot(4, 8, i + 1, xticks=[], yticks=[]) ax.imshow(np.squeeze(x_test[idx])) pred_idx = np.argmax(y_hat[idx]) true_idx = np.argmax(y_test[idx]) ax.set_title(\"&#123;&#125; (&#123;&#125;)\".format(cifar10_labels[pred_idx], cifar10_labels[true_idx]), color=(\"green\" if pred_idx == true_idx else \"red\")) 感言:说实话图像识别的发展是一个很漫长的过程，通过结果可以发现有时候我们确实有点为难机器了，不信你们自己看看那训练结果。。 有些图片你自己都不知道是什么东西。。 还有一点 感谢各位的支持 ！拜拜👋！ 还没完。 没有GPU的小伙伴可以去亚马逊申请免费的GPU服务器后 嘿嘿😁 最后像提供数据集的前辈们致敬！","categories":[],"tags":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://yoursite.com/tags/Deep-Learning/"}],"keywords":[]}]}